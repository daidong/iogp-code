/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.ttu.discl.iogp.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-7-24")
public class TravelCommand implements org.apache.thrift.TBase<TravelCommand, TravelCommand._Fields>, java.io.Serializable, Cloneable, Comparable<TravelCommand> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TravelCommand");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRAVEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("travelId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField STEP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stepId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REPLY_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_to", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField GET_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("get_from", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("payload", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TS_FIELD_DESC = new org.apache.thrift.protocol.TField("ts", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField EXT_SRV_FIELD_DESC = new org.apache.thrift.protocol.TField("ext_srv", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("vals", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField SUB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sub_type", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField LOCAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("local_id", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("epoch", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TravelCommandStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TravelCommandTupleSchemeFactory());
  }

  /**
   * 
   * @see TravelCommandType
   */
  public TravelCommandType type; // required
  public long travelId; // required
  public int stepId; // required
  public int reply_to; // optional
  public int get_from; // optional
  public String payload; // optional
  public long ts; // optional
  public List<Integer> ext_srv; // optional
  public List<KeyValue> vals; // optional
  public List<ByteBuffer> keys; // optional
  public int sub_type; // optional
  public int local_id; // optional
  public List<EpochEntity> epoch; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TravelCommandType
     */
    TYPE((short)1, "type"),
    TRAVEL_ID((short)2, "travelId"),
    STEP_ID((short)3, "stepId"),
    REPLY_TO((short)4, "reply_to"),
    GET_FROM((short)5, "get_from"),
    PAYLOAD((short)6, "payload"),
    TS((short)7, "ts"),
    EXT_SRV((short)8, "ext_srv"),
    VALS((short)9, "vals"),
    KEYS((short)10, "keys"),
    SUB_TYPE((short)11, "sub_type"),
    LOCAL_ID((short)12, "local_id"),
    EPOCH((short)13, "epoch");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // TRAVEL_ID
          return TRAVEL_ID;
        case 3: // STEP_ID
          return STEP_ID;
        case 4: // REPLY_TO
          return REPLY_TO;
        case 5: // GET_FROM
          return GET_FROM;
        case 6: // PAYLOAD
          return PAYLOAD;
        case 7: // TS
          return TS;
        case 8: // EXT_SRV
          return EXT_SRV;
        case 9: // VALS
          return VALS;
        case 10: // KEYS
          return KEYS;
        case 11: // SUB_TYPE
          return SUB_TYPE;
        case 12: // LOCAL_ID
          return LOCAL_ID;
        case 13: // EPOCH
          return EPOCH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRAVELID_ISSET_ID = 0;
  private static final int __STEPID_ISSET_ID = 1;
  private static final int __REPLY_TO_ISSET_ID = 2;
  private static final int __GET_FROM_ISSET_ID = 3;
  private static final int __TS_ISSET_ID = 4;
  private static final int __SUB_TYPE_ISSET_ID = 5;
  private static final int __LOCAL_ID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPLY_TO,_Fields.GET_FROM,_Fields.PAYLOAD,_Fields.TS,_Fields.EXT_SRV,_Fields.VALS,_Fields.KEYS,_Fields.SUB_TYPE,_Fields.LOCAL_ID,_Fields.EPOCH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TravelCommandType.class)));
    tmpMap.put(_Fields.TRAVEL_ID, new org.apache.thrift.meta_data.FieldMetaData("travelId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STEP_ID, new org.apache.thrift.meta_data.FieldMetaData("stepId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLY_TO, new org.apache.thrift.meta_data.FieldMetaData("reply_to", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GET_FROM, new org.apache.thrift.meta_data.FieldMetaData("get_from", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("payload", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TS, new org.apache.thrift.meta_data.FieldMetaData("ts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXT_SRV, new org.apache.thrift.meta_data.FieldMetaData("ext_srv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.VALS, new org.apache.thrift.meta_data.FieldMetaData("vals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValue.class))));
    tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.SUB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sub_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCAL_ID, new org.apache.thrift.meta_data.FieldMetaData("local_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EPOCH, new org.apache.thrift.meta_data.FieldMetaData("epoch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EpochEntity.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TravelCommand.class, metaDataMap);
  }

  public TravelCommand() {
  }

  public TravelCommand(
    TravelCommandType type,
    long travelId,
    int stepId)
  {
    this();
    this.type = type;
    this.travelId = travelId;
    setTravelIdIsSet(true);
    this.stepId = stepId;
    setStepIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TravelCommand(TravelCommand other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.travelId = other.travelId;
    this.stepId = other.stepId;
    this.reply_to = other.reply_to;
    this.get_from = other.get_from;
    if (other.isSetPayload()) {
      this.payload = other.payload;
    }
    this.ts = other.ts;
    if (other.isSetExt_srv()) {
      List<Integer> __this__ext_srv = new ArrayList<Integer>(other.ext_srv);
      this.ext_srv = __this__ext_srv;
    }
    if (other.isSetVals()) {
      List<KeyValue> __this__vals = new ArrayList<KeyValue>(other.vals.size());
      for (KeyValue other_element : other.vals) {
        __this__vals.add(new KeyValue(other_element));
      }
      this.vals = __this__vals;
    }
    if (other.isSetKeys()) {
      List<ByteBuffer> __this__keys = new ArrayList<ByteBuffer>(other.keys);
      this.keys = __this__keys;
    }
    this.sub_type = other.sub_type;
    this.local_id = other.local_id;
    if (other.isSetEpoch()) {
      List<EpochEntity> __this__epoch = new ArrayList<EpochEntity>(other.epoch.size());
      for (EpochEntity other_element : other.epoch) {
        __this__epoch.add(new EpochEntity(other_element));
      }
      this.epoch = __this__epoch;
    }
  }

  public TravelCommand deepCopy() {
    return new TravelCommand(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setTravelIdIsSet(false);
    this.travelId = 0;
    setStepIdIsSet(false);
    this.stepId = 0;
    setReply_toIsSet(false);
    this.reply_to = 0;
    setGet_fromIsSet(false);
    this.get_from = 0;
    this.payload = null;
    setTsIsSet(false);
    this.ts = 0;
    this.ext_srv = null;
    this.vals = null;
    this.keys = null;
    setSub_typeIsSet(false);
    this.sub_type = 0;
    setLocal_idIsSet(false);
    this.local_id = 0;
    this.epoch = null;
  }

  /**
   * 
   * @see TravelCommandType
   */
  public TravelCommandType getType() {
    return this.type;
  }

  /**
   * 
   * @see TravelCommandType
   */
  public TravelCommand setType(TravelCommandType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getTravelId() {
    return this.travelId;
  }

  public TravelCommand setTravelId(long travelId) {
    this.travelId = travelId;
    setTravelIdIsSet(true);
    return this;
  }

  public void unsetTravelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRAVELID_ISSET_ID);
  }

  /** Returns true if field travelId is set (has been assigned a value) and false otherwise */
  public boolean isSetTravelId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRAVELID_ISSET_ID);
  }

  public void setTravelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRAVELID_ISSET_ID, value);
  }

  public int getStepId() {
    return this.stepId;
  }

  public TravelCommand setStepId(int stepId) {
    this.stepId = stepId;
    setStepIdIsSet(true);
    return this;
  }

  public void unsetStepId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STEPID_ISSET_ID);
  }

  /** Returns true if field stepId is set (has been assigned a value) and false otherwise */
  public boolean isSetStepId() {
    return EncodingUtils.testBit(__isset_bitfield, __STEPID_ISSET_ID);
  }

  public void setStepIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STEPID_ISSET_ID, value);
  }

  public int getReply_to() {
    return this.reply_to;
  }

  public TravelCommand setReply_to(int reply_to) {
    this.reply_to = reply_to;
    setReply_toIsSet(true);
    return this;
  }

  public void unsetReply_to() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLY_TO_ISSET_ID);
  }

  /** Returns true if field reply_to is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_to() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLY_TO_ISSET_ID);
  }

  public void setReply_toIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLY_TO_ISSET_ID, value);
  }

  public int getGet_from() {
    return this.get_from;
  }

  public TravelCommand setGet_from(int get_from) {
    this.get_from = get_from;
    setGet_fromIsSet(true);
    return this;
  }

  public void unsetGet_from() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GET_FROM_ISSET_ID);
  }

  /** Returns true if field get_from is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_from() {
    return EncodingUtils.testBit(__isset_bitfield, __GET_FROM_ISSET_ID);
  }

  public void setGet_fromIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GET_FROM_ISSET_ID, value);
  }

  public String getPayload() {
    return this.payload;
  }

  public TravelCommand setPayload(String payload) {
    this.payload = payload;
    return this;
  }

  public void unsetPayload() {
    this.payload = null;
  }

  /** Returns true if field payload is set (has been assigned a value) and false otherwise */
  public boolean isSetPayload() {
    return this.payload != null;
  }

  public void setPayloadIsSet(boolean value) {
    if (!value) {
      this.payload = null;
    }
  }

  public long getTs() {
    return this.ts;
  }

  public TravelCommand setTs(long ts) {
    this.ts = ts;
    setTsIsSet(true);
    return this;
  }

  public void unsetTs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TS_ISSET_ID);
  }

  /** Returns true if field ts is set (has been assigned a value) and false otherwise */
  public boolean isSetTs() {
    return EncodingUtils.testBit(__isset_bitfield, __TS_ISSET_ID);
  }

  public void setTsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TS_ISSET_ID, value);
  }

  public int getExt_srvSize() {
    return (this.ext_srv == null) ? 0 : this.ext_srv.size();
  }

  public java.util.Iterator<Integer> getExt_srvIterator() {
    return (this.ext_srv == null) ? null : this.ext_srv.iterator();
  }

  public void addToExt_srv(int elem) {
    if (this.ext_srv == null) {
      this.ext_srv = new ArrayList<Integer>();
    }
    this.ext_srv.add(elem);
  }

  public List<Integer> getExt_srv() {
    return this.ext_srv;
  }

  public TravelCommand setExt_srv(List<Integer> ext_srv) {
    this.ext_srv = ext_srv;
    return this;
  }

  public void unsetExt_srv() {
    this.ext_srv = null;
  }

  /** Returns true if field ext_srv is set (has been assigned a value) and false otherwise */
  public boolean isSetExt_srv() {
    return this.ext_srv != null;
  }

  public void setExt_srvIsSet(boolean value) {
    if (!value) {
      this.ext_srv = null;
    }
  }

  public int getValsSize() {
    return (this.vals == null) ? 0 : this.vals.size();
  }

  public java.util.Iterator<KeyValue> getValsIterator() {
    return (this.vals == null) ? null : this.vals.iterator();
  }

  public void addToVals(KeyValue elem) {
    if (this.vals == null) {
      this.vals = new ArrayList<KeyValue>();
    }
    this.vals.add(elem);
  }

  public List<KeyValue> getVals() {
    return this.vals;
  }

  public TravelCommand setVals(List<KeyValue> vals) {
    this.vals = vals;
    return this;
  }

  public void unsetVals() {
    this.vals = null;
  }

  /** Returns true if field vals is set (has been assigned a value) and false otherwise */
  public boolean isSetVals() {
    return this.vals != null;
  }

  public void setValsIsSet(boolean value) {
    if (!value) {
      this.vals = null;
    }
  }

  public int getKeysSize() {
    return (this.keys == null) ? 0 : this.keys.size();
  }

  public java.util.Iterator<ByteBuffer> getKeysIterator() {
    return (this.keys == null) ? null : this.keys.iterator();
  }

  public void addToKeys(ByteBuffer elem) {
    if (this.keys == null) {
      this.keys = new ArrayList<ByteBuffer>();
    }
    this.keys.add(elem);
  }

  public List<ByteBuffer> getKeys() {
    return this.keys;
  }

  public TravelCommand setKeys(List<ByteBuffer> keys) {
    this.keys = keys;
    return this;
  }

  public void unsetKeys() {
    this.keys = null;
  }

  /** Returns true if field keys is set (has been assigned a value) and false otherwise */
  public boolean isSetKeys() {
    return this.keys != null;
  }

  public void setKeysIsSet(boolean value) {
    if (!value) {
      this.keys = null;
    }
  }

  public int getSub_type() {
    return this.sub_type;
  }

  public TravelCommand setSub_type(int sub_type) {
    this.sub_type = sub_type;
    setSub_typeIsSet(true);
    return this;
  }

  public void unsetSub_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUB_TYPE_ISSET_ID);
  }

  /** Returns true if field sub_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSub_type() {
    return EncodingUtils.testBit(__isset_bitfield, __SUB_TYPE_ISSET_ID);
  }

  public void setSub_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUB_TYPE_ISSET_ID, value);
  }

  public int getLocal_id() {
    return this.local_id;
  }

  public TravelCommand setLocal_id(int local_id) {
    this.local_id = local_id;
    setLocal_idIsSet(true);
    return this;
  }

  public void unsetLocal_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCAL_ID_ISSET_ID);
  }

  /** Returns true if field local_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_id() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCAL_ID_ISSET_ID);
  }

  public void setLocal_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCAL_ID_ISSET_ID, value);
  }

  public int getEpochSize() {
    return (this.epoch == null) ? 0 : this.epoch.size();
  }

  public java.util.Iterator<EpochEntity> getEpochIterator() {
    return (this.epoch == null) ? null : this.epoch.iterator();
  }

  public void addToEpoch(EpochEntity elem) {
    if (this.epoch == null) {
      this.epoch = new ArrayList<EpochEntity>();
    }
    this.epoch.add(elem);
  }

  public List<EpochEntity> getEpoch() {
    return this.epoch;
  }

  public TravelCommand setEpoch(List<EpochEntity> epoch) {
    this.epoch = epoch;
    return this;
  }

  public void unsetEpoch() {
    this.epoch = null;
  }

  /** Returns true if field epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetEpoch() {
    return this.epoch != null;
  }

  public void setEpochIsSet(boolean value) {
    if (!value) {
      this.epoch = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TravelCommandType)value);
      }
      break;

    case TRAVEL_ID:
      if (value == null) {
        unsetTravelId();
      } else {
        setTravelId((Long)value);
      }
      break;

    case STEP_ID:
      if (value == null) {
        unsetStepId();
      } else {
        setStepId((Integer)value);
      }
      break;

    case REPLY_TO:
      if (value == null) {
        unsetReply_to();
      } else {
        setReply_to((Integer)value);
      }
      break;

    case GET_FROM:
      if (value == null) {
        unsetGet_from();
      } else {
        setGet_from((Integer)value);
      }
      break;

    case PAYLOAD:
      if (value == null) {
        unsetPayload();
      } else {
        setPayload((String)value);
      }
      break;

    case TS:
      if (value == null) {
        unsetTs();
      } else {
        setTs((Long)value);
      }
      break;

    case EXT_SRV:
      if (value == null) {
        unsetExt_srv();
      } else {
        setExt_srv((List<Integer>)value);
      }
      break;

    case VALS:
      if (value == null) {
        unsetVals();
      } else {
        setVals((List<KeyValue>)value);
      }
      break;

    case KEYS:
      if (value == null) {
        unsetKeys();
      } else {
        setKeys((List<ByteBuffer>)value);
      }
      break;

    case SUB_TYPE:
      if (value == null) {
        unsetSub_type();
      } else {
        setSub_type((Integer)value);
      }
      break;

    case LOCAL_ID:
      if (value == null) {
        unsetLocal_id();
      } else {
        setLocal_id((Integer)value);
      }
      break;

    case EPOCH:
      if (value == null) {
        unsetEpoch();
      } else {
        setEpoch((List<EpochEntity>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case TRAVEL_ID:
      return Long.valueOf(getTravelId());

    case STEP_ID:
      return Integer.valueOf(getStepId());

    case REPLY_TO:
      return Integer.valueOf(getReply_to());

    case GET_FROM:
      return Integer.valueOf(getGet_from());

    case PAYLOAD:
      return getPayload();

    case TS:
      return Long.valueOf(getTs());

    case EXT_SRV:
      return getExt_srv();

    case VALS:
      return getVals();

    case KEYS:
      return getKeys();

    case SUB_TYPE:
      return Integer.valueOf(getSub_type());

    case LOCAL_ID:
      return Integer.valueOf(getLocal_id());

    case EPOCH:
      return getEpoch();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case TRAVEL_ID:
      return isSetTravelId();
    case STEP_ID:
      return isSetStepId();
    case REPLY_TO:
      return isSetReply_to();
    case GET_FROM:
      return isSetGet_from();
    case PAYLOAD:
      return isSetPayload();
    case TS:
      return isSetTs();
    case EXT_SRV:
      return isSetExt_srv();
    case VALS:
      return isSetVals();
    case KEYS:
      return isSetKeys();
    case SUB_TYPE:
      return isSetSub_type();
    case LOCAL_ID:
      return isSetLocal_id();
    case EPOCH:
      return isSetEpoch();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TravelCommand)
      return this.equals((TravelCommand)that);
    return false;
  }

  public boolean equals(TravelCommand that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_travelId = true;
    boolean that_present_travelId = true;
    if (this_present_travelId || that_present_travelId) {
      if (!(this_present_travelId && that_present_travelId))
        return false;
      if (this.travelId != that.travelId)
        return false;
    }

    boolean this_present_stepId = true;
    boolean that_present_stepId = true;
    if (this_present_stepId || that_present_stepId) {
      if (!(this_present_stepId && that_present_stepId))
        return false;
      if (this.stepId != that.stepId)
        return false;
    }

    boolean this_present_reply_to = true && this.isSetReply_to();
    boolean that_present_reply_to = true && that.isSetReply_to();
    if (this_present_reply_to || that_present_reply_to) {
      if (!(this_present_reply_to && that_present_reply_to))
        return false;
      if (this.reply_to != that.reply_to)
        return false;
    }

    boolean this_present_get_from = true && this.isSetGet_from();
    boolean that_present_get_from = true && that.isSetGet_from();
    if (this_present_get_from || that_present_get_from) {
      if (!(this_present_get_from && that_present_get_from))
        return false;
      if (this.get_from != that.get_from)
        return false;
    }

    boolean this_present_payload = true && this.isSetPayload();
    boolean that_present_payload = true && that.isSetPayload();
    if (this_present_payload || that_present_payload) {
      if (!(this_present_payload && that_present_payload))
        return false;
      if (!this.payload.equals(that.payload))
        return false;
    }

    boolean this_present_ts = true && this.isSetTs();
    boolean that_present_ts = true && that.isSetTs();
    if (this_present_ts || that_present_ts) {
      if (!(this_present_ts && that_present_ts))
        return false;
      if (this.ts != that.ts)
        return false;
    }

    boolean this_present_ext_srv = true && this.isSetExt_srv();
    boolean that_present_ext_srv = true && that.isSetExt_srv();
    if (this_present_ext_srv || that_present_ext_srv) {
      if (!(this_present_ext_srv && that_present_ext_srv))
        return false;
      if (!this.ext_srv.equals(that.ext_srv))
        return false;
    }

    boolean this_present_vals = true && this.isSetVals();
    boolean that_present_vals = true && that.isSetVals();
    if (this_present_vals || that_present_vals) {
      if (!(this_present_vals && that_present_vals))
        return false;
      if (!this.vals.equals(that.vals))
        return false;
    }

    boolean this_present_keys = true && this.isSetKeys();
    boolean that_present_keys = true && that.isSetKeys();
    if (this_present_keys || that_present_keys) {
      if (!(this_present_keys && that_present_keys))
        return false;
      if (!this.keys.equals(that.keys))
        return false;
    }

    boolean this_present_sub_type = true && this.isSetSub_type();
    boolean that_present_sub_type = true && that.isSetSub_type();
    if (this_present_sub_type || that_present_sub_type) {
      if (!(this_present_sub_type && that_present_sub_type))
        return false;
      if (this.sub_type != that.sub_type)
        return false;
    }

    boolean this_present_local_id = true && this.isSetLocal_id();
    boolean that_present_local_id = true && that.isSetLocal_id();
    if (this_present_local_id || that_present_local_id) {
      if (!(this_present_local_id && that_present_local_id))
        return false;
      if (this.local_id != that.local_id)
        return false;
    }

    boolean this_present_epoch = true && this.isSetEpoch();
    boolean that_present_epoch = true && that.isSetEpoch();
    if (this_present_epoch || that_present_epoch) {
      if (!(this_present_epoch && that_present_epoch))
        return false;
      if (!this.epoch.equals(that.epoch))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_travelId = true;
    list.add(present_travelId);
    if (present_travelId)
      list.add(travelId);

    boolean present_stepId = true;
    list.add(present_stepId);
    if (present_stepId)
      list.add(stepId);

    boolean present_reply_to = true && (isSetReply_to());
    list.add(present_reply_to);
    if (present_reply_to)
      list.add(reply_to);

    boolean present_get_from = true && (isSetGet_from());
    list.add(present_get_from);
    if (present_get_from)
      list.add(get_from);

    boolean present_payload = true && (isSetPayload());
    list.add(present_payload);
    if (present_payload)
      list.add(payload);

    boolean present_ts = true && (isSetTs());
    list.add(present_ts);
    if (present_ts)
      list.add(ts);

    boolean present_ext_srv = true && (isSetExt_srv());
    list.add(present_ext_srv);
    if (present_ext_srv)
      list.add(ext_srv);

    boolean present_vals = true && (isSetVals());
    list.add(present_vals);
    if (present_vals)
      list.add(vals);

    boolean present_keys = true && (isSetKeys());
    list.add(present_keys);
    if (present_keys)
      list.add(keys);

    boolean present_sub_type = true && (isSetSub_type());
    list.add(present_sub_type);
    if (present_sub_type)
      list.add(sub_type);

    boolean present_local_id = true && (isSetLocal_id());
    list.add(present_local_id);
    if (present_local_id)
      list.add(local_id);

    boolean present_epoch = true && (isSetEpoch());
    list.add(present_epoch);
    if (present_epoch)
      list.add(epoch);

    return list.hashCode();
  }

  @Override
  public int compareTo(TravelCommand other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTravelId()).compareTo(other.isSetTravelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTravelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.travelId, other.travelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepId()).compareTo(other.isSetStepId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepId, other.stepId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_to()).compareTo(other.isSetReply_to());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_to()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_to, other.reply_to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_from()).compareTo(other.isSetGet_from());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_from()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_from, other.get_from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayload()).compareTo(other.isSetPayload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payload, other.payload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTs()).compareTo(other.isSetTs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ts, other.ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt_srv()).compareTo(other.isSetExt_srv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt_srv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext_srv, other.ext_srv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVals()).compareTo(other.isSetVals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vals, other.vals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSub_type()).compareTo(other.isSetSub_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSub_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sub_type, other.sub_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocal_id()).compareTo(other.isSetLocal_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_id, other.local_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEpoch()).compareTo(other.isSetEpoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epoch, other.epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TravelCommand(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("travelId:");
    sb.append(this.travelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stepId:");
    sb.append(this.stepId);
    first = false;
    if (isSetReply_to()) {
      if (!first) sb.append(", ");
      sb.append("reply_to:");
      sb.append(this.reply_to);
      first = false;
    }
    if (isSetGet_from()) {
      if (!first) sb.append(", ");
      sb.append("get_from:");
      sb.append(this.get_from);
      first = false;
    }
    if (isSetPayload()) {
      if (!first) sb.append(", ");
      sb.append("payload:");
      if (this.payload == null) {
        sb.append("null");
      } else {
        sb.append(this.payload);
      }
      first = false;
    }
    if (isSetTs()) {
      if (!first) sb.append(", ");
      sb.append("ts:");
      sb.append(this.ts);
      first = false;
    }
    if (isSetExt_srv()) {
      if (!first) sb.append(", ");
      sb.append("ext_srv:");
      if (this.ext_srv == null) {
        sb.append("null");
      } else {
        sb.append(this.ext_srv);
      }
      first = false;
    }
    if (isSetVals()) {
      if (!first) sb.append(", ");
      sb.append("vals:");
      if (this.vals == null) {
        sb.append("null");
      } else {
        sb.append(this.vals);
      }
      first = false;
    }
    if (isSetKeys()) {
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
    }
    if (isSetSub_type()) {
      if (!first) sb.append(", ");
      sb.append("sub_type:");
      sb.append(this.sub_type);
      first = false;
    }
    if (isSetLocal_id()) {
      if (!first) sb.append(", ");
      sb.append("local_id:");
      sb.append(this.local_id);
      first = false;
    }
    if (isSetEpoch()) {
      if (!first) sb.append(", ");
      sb.append("epoch:");
      if (this.epoch == null) {
        sb.append("null");
      } else {
        sb.append(this.epoch);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'travelId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'stepId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TravelCommandStandardSchemeFactory implements SchemeFactory {
    public TravelCommandStandardScheme getScheme() {
      return new TravelCommandStandardScheme();
    }
  }

  private static class TravelCommandStandardScheme extends StandardScheme<TravelCommand> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TravelCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = edu.ttu.discl.iogp.thrift.TravelCommandType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRAVEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.travelId = iprot.readI64();
              struct.setTravelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STEP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stepId = iprot.readI32();
              struct.setStepIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPLY_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reply_to = iprot.readI32();
              struct.setReply_toIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GET_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.get_from = iprot.readI32();
              struct.setGet_fromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payload = iprot.readString();
              struct.setPayloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ts = iprot.readI64();
              struct.setTsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXT_SRV
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.ext_srv = new ArrayList<Integer>(_list8.size);
                int _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readI32();
                  struct.ext_srv.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setExt_srvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.vals = new ArrayList<KeyValue>(_list11.size);
                KeyValue _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new KeyValue();
                  _elem12.read(iprot);
                  struct.vals.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setValsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.keys = new ArrayList<ByteBuffer>(_list14.size);
                ByteBuffer _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = iprot.readBinary();
                  struct.keys.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sub_type = iprot.readI32();
              struct.setSub_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOCAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.local_id = iprot.readI32();
              struct.setLocal_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                struct.epoch = new ArrayList<EpochEntity>(_list17.size);
                EpochEntity _elem18;
                for (int _i19 = 0; _i19 < _list17.size; ++_i19)
                {
                  _elem18 = new EpochEntity();
                  _elem18.read(iprot);
                  struct.epoch.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setEpochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTravelId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'travelId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStepId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'stepId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TravelCommand struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRAVEL_ID_FIELD_DESC);
      oprot.writeI64(struct.travelId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STEP_ID_FIELD_DESC);
      oprot.writeI32(struct.stepId);
      oprot.writeFieldEnd();
      if (struct.isSetReply_to()) {
        oprot.writeFieldBegin(REPLY_TO_FIELD_DESC);
        oprot.writeI32(struct.reply_to);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGet_from()) {
        oprot.writeFieldBegin(GET_FROM_FIELD_DESC);
        oprot.writeI32(struct.get_from);
        oprot.writeFieldEnd();
      }
      if (struct.payload != null) {
        if (struct.isSetPayload()) {
          oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
          oprot.writeString(struct.payload);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTs()) {
        oprot.writeFieldBegin(TS_FIELD_DESC);
        oprot.writeI64(struct.ts);
        oprot.writeFieldEnd();
      }
      if (struct.ext_srv != null) {
        if (struct.isSetExt_srv()) {
          oprot.writeFieldBegin(EXT_SRV_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ext_srv.size()));
            for (int _iter20 : struct.ext_srv)
            {
              oprot.writeI32(_iter20);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.vals != null) {
        if (struct.isSetVals()) {
          oprot.writeFieldBegin(VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vals.size()));
            for (KeyValue _iter21 : struct.vals)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.keys != null) {
        if (struct.isSetKeys()) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (ByteBuffer _iter22 : struct.keys)
            {
              oprot.writeBinary(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSub_type()) {
        oprot.writeFieldBegin(SUB_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sub_type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLocal_id()) {
        oprot.writeFieldBegin(LOCAL_ID_FIELD_DESC);
        oprot.writeI32(struct.local_id);
        oprot.writeFieldEnd();
      }
      if (struct.epoch != null) {
        if (struct.isSetEpoch()) {
          oprot.writeFieldBegin(EPOCH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.epoch.size()));
            for (EpochEntity _iter23 : struct.epoch)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TravelCommandTupleSchemeFactory implements SchemeFactory {
    public TravelCommandTupleScheme getScheme() {
      return new TravelCommandTupleScheme();
    }
  }

  private static class TravelCommandTupleScheme extends TupleScheme<TravelCommand> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TravelCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      oprot.writeI64(struct.travelId);
      oprot.writeI32(struct.stepId);
      BitSet optionals = new BitSet();
      if (struct.isSetReply_to()) {
        optionals.set(0);
      }
      if (struct.isSetGet_from()) {
        optionals.set(1);
      }
      if (struct.isSetPayload()) {
        optionals.set(2);
      }
      if (struct.isSetTs()) {
        optionals.set(3);
      }
      if (struct.isSetExt_srv()) {
        optionals.set(4);
      }
      if (struct.isSetVals()) {
        optionals.set(5);
      }
      if (struct.isSetKeys()) {
        optionals.set(6);
      }
      if (struct.isSetSub_type()) {
        optionals.set(7);
      }
      if (struct.isSetLocal_id()) {
        optionals.set(8);
      }
      if (struct.isSetEpoch()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetReply_to()) {
        oprot.writeI32(struct.reply_to);
      }
      if (struct.isSetGet_from()) {
        oprot.writeI32(struct.get_from);
      }
      if (struct.isSetPayload()) {
        oprot.writeString(struct.payload);
      }
      if (struct.isSetTs()) {
        oprot.writeI64(struct.ts);
      }
      if (struct.isSetExt_srv()) {
        {
          oprot.writeI32(struct.ext_srv.size());
          for (int _iter24 : struct.ext_srv)
          {
            oprot.writeI32(_iter24);
          }
        }
      }
      if (struct.isSetVals()) {
        {
          oprot.writeI32(struct.vals.size());
          for (KeyValue _iter25 : struct.vals)
          {
            _iter25.write(oprot);
          }
        }
      }
      if (struct.isSetKeys()) {
        {
          oprot.writeI32(struct.keys.size());
          for (ByteBuffer _iter26 : struct.keys)
          {
            oprot.writeBinary(_iter26);
          }
        }
      }
      if (struct.isSetSub_type()) {
        oprot.writeI32(struct.sub_type);
      }
      if (struct.isSetLocal_id()) {
        oprot.writeI32(struct.local_id);
      }
      if (struct.isSetEpoch()) {
        {
          oprot.writeI32(struct.epoch.size());
          for (EpochEntity _iter27 : struct.epoch)
          {
            _iter27.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TravelCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = edu.ttu.discl.iogp.thrift.TravelCommandType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.travelId = iprot.readI64();
      struct.setTravelIdIsSet(true);
      struct.stepId = iprot.readI32();
      struct.setStepIdIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.reply_to = iprot.readI32();
        struct.setReply_toIsSet(true);
      }
      if (incoming.get(1)) {
        struct.get_from = iprot.readI32();
        struct.setGet_fromIsSet(true);
      }
      if (incoming.get(2)) {
        struct.payload = iprot.readString();
        struct.setPayloadIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ts = iprot.readI64();
        struct.setTsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.ext_srv = new ArrayList<Integer>(_list28.size);
          int _elem29;
          for (int _i30 = 0; _i30 < _list28.size; ++_i30)
          {
            _elem29 = iprot.readI32();
            struct.ext_srv.add(_elem29);
          }
        }
        struct.setExt_srvIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.vals = new ArrayList<KeyValue>(_list31.size);
          KeyValue _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new KeyValue();
            _elem32.read(iprot);
            struct.vals.add(_elem32);
          }
        }
        struct.setValsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.keys = new ArrayList<ByteBuffer>(_list34.size);
          ByteBuffer _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = iprot.readBinary();
            struct.keys.add(_elem35);
          }
        }
        struct.setKeysIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sub_type = iprot.readI32();
        struct.setSub_typeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.local_id = iprot.readI32();
        struct.setLocal_idIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.epoch = new ArrayList<EpochEntity>(_list37.size);
          EpochEntity _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new EpochEntity();
            _elem38.read(iprot);
            struct.epoch.add(_elem38);
          }
        }
        struct.setEpochIsSet(true);
      }
    }
  }

}

