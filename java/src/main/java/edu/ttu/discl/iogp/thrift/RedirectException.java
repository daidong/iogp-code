/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.ttu.discl.iogp.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-7-24")
public class RedirectException extends TException implements org.apache.thrift.TBase<RedirectException, RedirectException._Fields>, java.io.Serializable, Cloneable, Comparable<RedirectException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RedirectException");

  private static final org.apache.thrift.protocol.TField BITMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("bitmap", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RES_FIELD_DESC = new org.apache.thrift.protocol.TField("res", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RedirectExceptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RedirectExceptionTupleSchemeFactory());
  }

  public ByteBuffer bitmap; // required
  public List<KeyValue> res; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BITMAP((short)1, "bitmap"),
    RES((short)2, "res");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BITMAP
          return BITMAP;
        case 2: // RES
          return RES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BITMAP, new org.apache.thrift.meta_data.FieldMetaData("bitmap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.RES, new org.apache.thrift.meta_data.FieldMetaData("res", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValue.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RedirectException.class, metaDataMap);
  }

  public RedirectException() {
  }

  public RedirectException(
    ByteBuffer bitmap)
  {
    this();
    this.bitmap = org.apache.thrift.TBaseHelper.copyBinary(bitmap);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RedirectException(RedirectException other) {
    if (other.isSetBitmap()) {
      this.bitmap = org.apache.thrift.TBaseHelper.copyBinary(other.bitmap);
    }
    if (other.isSetRes()) {
      List<KeyValue> __this__res = new ArrayList<KeyValue>(other.res.size());
      for (KeyValue other_element : other.res) {
        __this__res.add(new KeyValue(other_element));
      }
      this.res = __this__res;
    }
  }

  public RedirectException deepCopy() {
    return new RedirectException(this);
  }

  @Override
  public void clear() {
    this.bitmap = null;
    this.res = null;
  }

  public byte[] getBitmap() {
    setBitmap(org.apache.thrift.TBaseHelper.rightSize(bitmap));
    return bitmap == null ? null : bitmap.array();
  }

  public ByteBuffer bufferForBitmap() {
    return org.apache.thrift.TBaseHelper.copyBinary(bitmap);
  }

  public RedirectException setBitmap(byte[] bitmap) {
    this.bitmap = bitmap == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(bitmap, bitmap.length));
    return this;
  }

  public RedirectException setBitmap(ByteBuffer bitmap) {
    this.bitmap = org.apache.thrift.TBaseHelper.copyBinary(bitmap);
    return this;
  }

  public void unsetBitmap() {
    this.bitmap = null;
  }

  /** Returns true if field bitmap is set (has been assigned a value) and false otherwise */
  public boolean isSetBitmap() {
    return this.bitmap != null;
  }

  public void setBitmapIsSet(boolean value) {
    if (!value) {
      this.bitmap = null;
    }
  }

  public int getResSize() {
    return (this.res == null) ? 0 : this.res.size();
  }

  public java.util.Iterator<KeyValue> getResIterator() {
    return (this.res == null) ? null : this.res.iterator();
  }

  public void addToRes(KeyValue elem) {
    if (this.res == null) {
      this.res = new ArrayList<KeyValue>();
    }
    this.res.add(elem);
  }

  public List<KeyValue> getRes() {
    return this.res;
  }

  public RedirectException setRes(List<KeyValue> res) {
    this.res = res;
    return this;
  }

  public void unsetRes() {
    this.res = null;
  }

  /** Returns true if field res is set (has been assigned a value) and false otherwise */
  public boolean isSetRes() {
    return this.res != null;
  }

  public void setResIsSet(boolean value) {
    if (!value) {
      this.res = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BITMAP:
      if (value == null) {
        unsetBitmap();
      } else {
        setBitmap((ByteBuffer)value);
      }
      break;

    case RES:
      if (value == null) {
        unsetRes();
      } else {
        setRes((List<KeyValue>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BITMAP:
      return getBitmap();

    case RES:
      return getRes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BITMAP:
      return isSetBitmap();
    case RES:
      return isSetRes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RedirectException)
      return this.equals((RedirectException)that);
    return false;
  }

  public boolean equals(RedirectException that) {
    if (that == null)
      return false;

    boolean this_present_bitmap = true && this.isSetBitmap();
    boolean that_present_bitmap = true && that.isSetBitmap();
    if (this_present_bitmap || that_present_bitmap) {
      if (!(this_present_bitmap && that_present_bitmap))
        return false;
      if (!this.bitmap.equals(that.bitmap))
        return false;
    }

    boolean this_present_res = true && this.isSetRes();
    boolean that_present_res = true && that.isSetRes();
    if (this_present_res || that_present_res) {
      if (!(this_present_res && that_present_res))
        return false;
      if (!this.res.equals(that.res))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bitmap = true && (isSetBitmap());
    list.add(present_bitmap);
    if (present_bitmap)
      list.add(bitmap);

    boolean present_res = true && (isSetRes());
    list.add(present_res);
    if (present_res)
      list.add(res);

    return list.hashCode();
  }

  @Override
  public int compareTo(RedirectException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBitmap()).compareTo(other.isSetBitmap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBitmap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bitmap, other.bitmap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRes()).compareTo(other.isSetRes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.res, other.res);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RedirectException(");
    boolean first = true;

    sb.append("bitmap:");
    if (this.bitmap == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.bitmap, sb);
    }
    first = false;
    if (isSetRes()) {
      if (!first) sb.append(", ");
      sb.append("res:");
      if (this.res == null) {
        sb.append("null");
      } else {
        sb.append(this.res);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (bitmap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bitmap' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RedirectExceptionStandardSchemeFactory implements SchemeFactory {
    public RedirectExceptionStandardScheme getScheme() {
      return new RedirectExceptionStandardScheme();
    }
  }

  private static class RedirectExceptionStandardScheme extends StandardScheme<RedirectException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RedirectException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BITMAP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bitmap = iprot.readBinary();
              struct.setBitmapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.res = new ArrayList<KeyValue>(_list0.size);
                KeyValue _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new KeyValue();
                  _elem1.read(iprot);
                  struct.res.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setResIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RedirectException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bitmap != null) {
        oprot.writeFieldBegin(BITMAP_FIELD_DESC);
        oprot.writeBinary(struct.bitmap);
        oprot.writeFieldEnd();
      }
      if (struct.res != null) {
        if (struct.isSetRes()) {
          oprot.writeFieldBegin(RES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.res.size()));
            for (KeyValue _iter3 : struct.res)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RedirectExceptionTupleSchemeFactory implements SchemeFactory {
    public RedirectExceptionTupleScheme getScheme() {
      return new RedirectExceptionTupleScheme();
    }
  }

  private static class RedirectExceptionTupleScheme extends TupleScheme<RedirectException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RedirectException struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBinary(struct.bitmap);
      BitSet optionals = new BitSet();
      if (struct.isSetRes()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRes()) {
        {
          oprot.writeI32(struct.res.size());
          for (KeyValue _iter4 : struct.res)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RedirectException struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.bitmap = iprot.readBinary();
      struct.setBitmapIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.res = new ArrayList<KeyValue>(_list5.size);
          KeyValue _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new KeyValue();
            _elem6.read(iprot);
            struct.res.add(_elem6);
          }
        }
        struct.setResIsSet(true);
      }
    }
  }

}

