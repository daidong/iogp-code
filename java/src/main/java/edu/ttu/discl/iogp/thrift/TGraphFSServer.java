/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.ttu.discl.iogp.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-7-24")
public class TGraphFSServer {

  public interface Iface {

    public int insert(ByteBuffer src, ByteBuffer dst, int type, ByteBuffer val, long ts) throws RedirectException, org.apache.thrift.TException;

    public int batch_insert(ByteBuffer src, int vid, List<KeyValue> batches) throws RedirectException, org.apache.thrift.TException;

    public int split(ByteBuffer src, int vid, int stage, ByteBuffer bitmap) throws org.apache.thrift.TException;

    public int rec_split(ByteBuffer src, int vid, List<KeyValue> batches) throws org.apache.thrift.TException;

    public List<Dist> get_state() throws org.apache.thrift.TException;

    public List<KeyValue> read(ByteBuffer src, ByteBuffer dst, int type, long ts) throws RedirectException, org.apache.thrift.TException;

    public List<KeyValue> scan(ByteBuffer src, int type, ByteBuffer bitmap, long ts1, long ts2) throws RedirectException, org.apache.thrift.TException;

    public int echo(int s, ByteBuffer payload) throws org.apache.thrift.TException;

    public int syncTravel(TravelCommand tc) throws org.apache.thrift.TException;

    public int syncTravelMaster(TravelCommand tc) throws org.apache.thrift.TException;

    public int syncTravelRtn(TravelCommand tc) throws org.apache.thrift.TException;

    public int syncTravelStart(TravelCommand tc) throws org.apache.thrift.TException;

    public int syncTravelExtend(TravelCommand tc) throws org.apache.thrift.TException;

    public int syncTravelFinish(TravelCommand tc) throws org.apache.thrift.TException;

    public int deleteSyncTravelInstance(TravelCommand tc) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void insert(ByteBuffer src, ByteBuffer dst, int type, ByteBuffer val, long ts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batch_insert(ByteBuffer src, int vid, List<KeyValue> batches, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void split(ByteBuffer src, int vid, int stage, ByteBuffer bitmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rec_split(ByteBuffer src, int vid, List<KeyValue> batches, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_state(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void read(ByteBuffer src, ByteBuffer dst, int type, long ts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void scan(ByteBuffer src, int type, ByteBuffer bitmap, long ts1, long ts2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void echo(int s, ByteBuffer payload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void syncTravel(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void syncTravelMaster(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void syncTravelRtn(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void syncTravelStart(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void syncTravelExtend(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void syncTravelFinish(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSyncTravelInstance(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int insert(ByteBuffer src, ByteBuffer dst, int type, ByteBuffer val, long ts) throws RedirectException, org.apache.thrift.TException
    {
      send_insert(src, dst, type, val, ts);
      return recv_insert();
    }

    public void send_insert(ByteBuffer src, ByteBuffer dst, int type, ByteBuffer val, long ts) throws org.apache.thrift.TException
    {
      insert_args args = new insert_args();
      args.setSrc(src);
      args.setDst(dst);
      args.setType(type);
      args.setVal(val);
      args.setTs(ts);
      sendBase("insert", args);
    }

    public int recv_insert() throws RedirectException, org.apache.thrift.TException
    {
      insert_result result = new insert_result();
      receiveBase(result, "insert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.r != null) {
        throw result.r;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insert failed: unknown result");
    }

    public int batch_insert(ByteBuffer src, int vid, List<KeyValue> batches) throws RedirectException, org.apache.thrift.TException
    {
      send_batch_insert(src, vid, batches);
      return recv_batch_insert();
    }

    public void send_batch_insert(ByteBuffer src, int vid, List<KeyValue> batches) throws org.apache.thrift.TException
    {
      batch_insert_args args = new batch_insert_args();
      args.setSrc(src);
      args.setVid(vid);
      args.setBatches(batches);
      sendBase("batch_insert", args);
    }

    public int recv_batch_insert() throws RedirectException, org.apache.thrift.TException
    {
      batch_insert_result result = new batch_insert_result();
      receiveBase(result, "batch_insert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.r != null) {
        throw result.r;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batch_insert failed: unknown result");
    }

    public int split(ByteBuffer src, int vid, int stage, ByteBuffer bitmap) throws org.apache.thrift.TException
    {
      send_split(src, vid, stage, bitmap);
      return recv_split();
    }

    public void send_split(ByteBuffer src, int vid, int stage, ByteBuffer bitmap) throws org.apache.thrift.TException
    {
      split_args args = new split_args();
      args.setSrc(src);
      args.setVid(vid);
      args.setStage(stage);
      args.setBitmap(bitmap);
      sendBase("split", args);
    }

    public int recv_split() throws org.apache.thrift.TException
    {
      split_result result = new split_result();
      receiveBase(result, "split");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "split failed: unknown result");
    }

    public int rec_split(ByteBuffer src, int vid, List<KeyValue> batches) throws org.apache.thrift.TException
    {
      send_rec_split(src, vid, batches);
      return recv_rec_split();
    }

    public void send_rec_split(ByteBuffer src, int vid, List<KeyValue> batches) throws org.apache.thrift.TException
    {
      rec_split_args args = new rec_split_args();
      args.setSrc(src);
      args.setVid(vid);
      args.setBatches(batches);
      sendBase("rec_split", args);
    }

    public int recv_rec_split() throws org.apache.thrift.TException
    {
      rec_split_result result = new rec_split_result();
      receiveBase(result, "rec_split");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rec_split failed: unknown result");
    }

    public List<Dist> get_state() throws org.apache.thrift.TException
    {
      send_get_state();
      return recv_get_state();
    }

    public void send_get_state() throws org.apache.thrift.TException
    {
      get_state_args args = new get_state_args();
      sendBase("get_state", args);
    }

    public List<Dist> recv_get_state() throws org.apache.thrift.TException
    {
      get_state_result result = new get_state_result();
      receiveBase(result, "get_state");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_state failed: unknown result");
    }

    public List<KeyValue> read(ByteBuffer src, ByteBuffer dst, int type, long ts) throws RedirectException, org.apache.thrift.TException
    {
      send_read(src, dst, type, ts);
      return recv_read();
    }

    public void send_read(ByteBuffer src, ByteBuffer dst, int type, long ts) throws org.apache.thrift.TException
    {
      read_args args = new read_args();
      args.setSrc(src);
      args.setDst(dst);
      args.setType(type);
      args.setTs(ts);
      sendBase("read", args);
    }

    public List<KeyValue> recv_read() throws RedirectException, org.apache.thrift.TException
    {
      read_result result = new read_result();
      receiveBase(result, "read");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.r != null) {
        throw result.r;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "read failed: unknown result");
    }

    public List<KeyValue> scan(ByteBuffer src, int type, ByteBuffer bitmap, long ts1, long ts2) throws RedirectException, org.apache.thrift.TException
    {
      send_scan(src, type, bitmap, ts1, ts2);
      return recv_scan();
    }

    public void send_scan(ByteBuffer src, int type, ByteBuffer bitmap, long ts1, long ts2) throws org.apache.thrift.TException
    {
      scan_args args = new scan_args();
      args.setSrc(src);
      args.setType(type);
      args.setBitmap(bitmap);
      args.setTs1(ts1);
      args.setTs2(ts2);
      sendBase("scan", args);
    }

    public List<KeyValue> recv_scan() throws RedirectException, org.apache.thrift.TException
    {
      scan_result result = new scan_result();
      receiveBase(result, "scan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.r != null) {
        throw result.r;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scan failed: unknown result");
    }

    public int echo(int s, ByteBuffer payload) throws org.apache.thrift.TException
    {
      send_echo(s, payload);
      return recv_echo();
    }

    public void send_echo(int s, ByteBuffer payload) throws org.apache.thrift.TException
    {
      echo_args args = new echo_args();
      args.setS(s);
      args.setPayload(payload);
      sendBase("echo", args);
    }

    public int recv_echo() throws org.apache.thrift.TException
    {
      echo_result result = new echo_result();
      receiveBase(result, "echo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo failed: unknown result");
    }

    public int syncTravel(TravelCommand tc) throws org.apache.thrift.TException
    {
      send_syncTravel(tc);
      return recv_syncTravel();
    }

    public void send_syncTravel(TravelCommand tc) throws org.apache.thrift.TException
    {
      syncTravel_args args = new syncTravel_args();
      args.setTc(tc);
      sendBase("syncTravel", args);
    }

    public int recv_syncTravel() throws org.apache.thrift.TException
    {
      syncTravel_result result = new syncTravel_result();
      receiveBase(result, "syncTravel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "syncTravel failed: unknown result");
    }

    public int syncTravelMaster(TravelCommand tc) throws org.apache.thrift.TException
    {
      send_syncTravelMaster(tc);
      return recv_syncTravelMaster();
    }

    public void send_syncTravelMaster(TravelCommand tc) throws org.apache.thrift.TException
    {
      syncTravelMaster_args args = new syncTravelMaster_args();
      args.setTc(tc);
      sendBase("syncTravelMaster", args);
    }

    public int recv_syncTravelMaster() throws org.apache.thrift.TException
    {
      syncTravelMaster_result result = new syncTravelMaster_result();
      receiveBase(result, "syncTravelMaster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "syncTravelMaster failed: unknown result");
    }

    public int syncTravelRtn(TravelCommand tc) throws org.apache.thrift.TException
    {
      send_syncTravelRtn(tc);
      return recv_syncTravelRtn();
    }

    public void send_syncTravelRtn(TravelCommand tc) throws org.apache.thrift.TException
    {
      syncTravelRtn_args args = new syncTravelRtn_args();
      args.setTc(tc);
      sendBase("syncTravelRtn", args);
    }

    public int recv_syncTravelRtn() throws org.apache.thrift.TException
    {
      syncTravelRtn_result result = new syncTravelRtn_result();
      receiveBase(result, "syncTravelRtn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "syncTravelRtn failed: unknown result");
    }

    public int syncTravelStart(TravelCommand tc) throws org.apache.thrift.TException
    {
      send_syncTravelStart(tc);
      return recv_syncTravelStart();
    }

    public void send_syncTravelStart(TravelCommand tc) throws org.apache.thrift.TException
    {
      syncTravelStart_args args = new syncTravelStart_args();
      args.setTc(tc);
      sendBase("syncTravelStart", args);
    }

    public int recv_syncTravelStart() throws org.apache.thrift.TException
    {
      syncTravelStart_result result = new syncTravelStart_result();
      receiveBase(result, "syncTravelStart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "syncTravelStart failed: unknown result");
    }

    public int syncTravelExtend(TravelCommand tc) throws org.apache.thrift.TException
    {
      send_syncTravelExtend(tc);
      return recv_syncTravelExtend();
    }

    public void send_syncTravelExtend(TravelCommand tc) throws org.apache.thrift.TException
    {
      syncTravelExtend_args args = new syncTravelExtend_args();
      args.setTc(tc);
      sendBase("syncTravelExtend", args);
    }

    public int recv_syncTravelExtend() throws org.apache.thrift.TException
    {
      syncTravelExtend_result result = new syncTravelExtend_result();
      receiveBase(result, "syncTravelExtend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "syncTravelExtend failed: unknown result");
    }

    public int syncTravelFinish(TravelCommand tc) throws org.apache.thrift.TException
    {
      send_syncTravelFinish(tc);
      return recv_syncTravelFinish();
    }

    public void send_syncTravelFinish(TravelCommand tc) throws org.apache.thrift.TException
    {
      syncTravelFinish_args args = new syncTravelFinish_args();
      args.setTc(tc);
      sendBase("syncTravelFinish", args);
    }

    public int recv_syncTravelFinish() throws org.apache.thrift.TException
    {
      syncTravelFinish_result result = new syncTravelFinish_result();
      receiveBase(result, "syncTravelFinish");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "syncTravelFinish failed: unknown result");
    }

    public int deleteSyncTravelInstance(TravelCommand tc) throws org.apache.thrift.TException
    {
      send_deleteSyncTravelInstance(tc);
      return recv_deleteSyncTravelInstance();
    }

    public void send_deleteSyncTravelInstance(TravelCommand tc) throws org.apache.thrift.TException
    {
      deleteSyncTravelInstance_args args = new deleteSyncTravelInstance_args();
      args.setTc(tc);
      sendBase("deleteSyncTravelInstance", args);
    }

    public int recv_deleteSyncTravelInstance() throws org.apache.thrift.TException
    {
      deleteSyncTravelInstance_result result = new deleteSyncTravelInstance_result();
      receiveBase(result, "deleteSyncTravelInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSyncTravelInstance failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void insert(ByteBuffer src, ByteBuffer dst, int type, ByteBuffer val, long ts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insert_call method_call = new insert_call(src, dst, type, val, ts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer src;
      private ByteBuffer dst;
      private int type;
      private ByteBuffer val;
      private long ts;
      public insert_call(ByteBuffer src, ByteBuffer dst, int type, ByteBuffer val, long ts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.dst = dst;
        this.type = type;
        this.val = val;
        this.ts = ts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insert_args args = new insert_args();
        args.setSrc(src);
        args.setDst(dst);
        args.setType(type);
        args.setVal(val);
        args.setTs(ts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws RedirectException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insert();
      }
    }

    public void batch_insert(ByteBuffer src, int vid, List<KeyValue> batches, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batch_insert_call method_call = new batch_insert_call(src, vid, batches, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batch_insert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer src;
      private int vid;
      private List<KeyValue> batches;
      public batch_insert_call(ByteBuffer src, int vid, List<KeyValue> batches, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.vid = vid;
        this.batches = batches;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batch_insert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batch_insert_args args = new batch_insert_args();
        args.setSrc(src);
        args.setVid(vid);
        args.setBatches(batches);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws RedirectException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batch_insert();
      }
    }

    public void split(ByteBuffer src, int vid, int stage, ByteBuffer bitmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      split_call method_call = new split_call(src, vid, stage, bitmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class split_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer src;
      private int vid;
      private int stage;
      private ByteBuffer bitmap;
      public split_call(ByteBuffer src, int vid, int stage, ByteBuffer bitmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.vid = vid;
        this.stage = stage;
        this.bitmap = bitmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("split", org.apache.thrift.protocol.TMessageType.CALL, 0));
        split_args args = new split_args();
        args.setSrc(src);
        args.setVid(vid);
        args.setStage(stage);
        args.setBitmap(bitmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_split();
      }
    }

    public void rec_split(ByteBuffer src, int vid, List<KeyValue> batches, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rec_split_call method_call = new rec_split_call(src, vid, batches, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rec_split_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer src;
      private int vid;
      private List<KeyValue> batches;
      public rec_split_call(ByteBuffer src, int vid, List<KeyValue> batches, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.vid = vid;
        this.batches = batches;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rec_split", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rec_split_args args = new rec_split_args();
        args.setSrc(src);
        args.setVid(vid);
        args.setBatches(batches);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rec_split();
      }
    }

    public void get_state(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_state_call method_call = new get_state_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_state_call extends org.apache.thrift.async.TAsyncMethodCall {
      public get_state_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_state", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_state_args args = new get_state_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Dist> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_state();
      }
    }

    public void read(ByteBuffer src, ByteBuffer dst, int type, long ts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      read_call method_call = new read_call(src, dst, type, ts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class read_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer src;
      private ByteBuffer dst;
      private int type;
      private long ts;
      public read_call(ByteBuffer src, ByteBuffer dst, int type, long ts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.dst = dst;
        this.type = type;
        this.ts = ts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("read", org.apache.thrift.protocol.TMessageType.CALL, 0));
        read_args args = new read_args();
        args.setSrc(src);
        args.setDst(dst);
        args.setType(type);
        args.setTs(ts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<KeyValue> getResult() throws RedirectException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_read();
      }
    }

    public void scan(ByteBuffer src, int type, ByteBuffer bitmap, long ts1, long ts2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scan_call method_call = new scan_call(src, type, bitmap, ts1, ts2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer src;
      private int type;
      private ByteBuffer bitmap;
      private long ts1;
      private long ts2;
      public scan_call(ByteBuffer src, int type, ByteBuffer bitmap, long ts1, long ts2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.src = src;
        this.type = type;
        this.bitmap = bitmap;
        this.ts1 = ts1;
        this.ts2 = ts2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scan_args args = new scan_args();
        args.setSrc(src);
        args.setType(type);
        args.setBitmap(bitmap);
        args.setTs1(ts1);
        args.setTs2(ts2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<KeyValue> getResult() throws RedirectException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scan();
      }
    }

    public void echo(int s, ByteBuffer payload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echo_call method_call = new echo_call(s, payload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int s;
      private ByteBuffer payload;
      public echo_call(int s, ByteBuffer payload, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.s = s;
        this.payload = payload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echo_args args = new echo_args();
        args.setS(s);
        args.setPayload(payload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echo();
      }
    }

    public void syncTravel(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      syncTravel_call method_call = new syncTravel_call(tc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class syncTravel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TravelCommand tc;
      public syncTravel_call(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tc = tc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("syncTravel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        syncTravel_args args = new syncTravel_args();
        args.setTc(tc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_syncTravel();
      }
    }

    public void syncTravelMaster(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      syncTravelMaster_call method_call = new syncTravelMaster_call(tc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class syncTravelMaster_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TravelCommand tc;
      public syncTravelMaster_call(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tc = tc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("syncTravelMaster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        syncTravelMaster_args args = new syncTravelMaster_args();
        args.setTc(tc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_syncTravelMaster();
      }
    }

    public void syncTravelRtn(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      syncTravelRtn_call method_call = new syncTravelRtn_call(tc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class syncTravelRtn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TravelCommand tc;
      public syncTravelRtn_call(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tc = tc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("syncTravelRtn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        syncTravelRtn_args args = new syncTravelRtn_args();
        args.setTc(tc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_syncTravelRtn();
      }
    }

    public void syncTravelStart(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      syncTravelStart_call method_call = new syncTravelStart_call(tc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class syncTravelStart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TravelCommand tc;
      public syncTravelStart_call(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tc = tc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("syncTravelStart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        syncTravelStart_args args = new syncTravelStart_args();
        args.setTc(tc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_syncTravelStart();
      }
    }

    public void syncTravelExtend(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      syncTravelExtend_call method_call = new syncTravelExtend_call(tc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class syncTravelExtend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TravelCommand tc;
      public syncTravelExtend_call(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tc = tc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("syncTravelExtend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        syncTravelExtend_args args = new syncTravelExtend_args();
        args.setTc(tc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_syncTravelExtend();
      }
    }

    public void syncTravelFinish(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      syncTravelFinish_call method_call = new syncTravelFinish_call(tc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class syncTravelFinish_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TravelCommand tc;
      public syncTravelFinish_call(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tc = tc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("syncTravelFinish", org.apache.thrift.protocol.TMessageType.CALL, 0));
        syncTravelFinish_args args = new syncTravelFinish_args();
        args.setTc(tc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_syncTravelFinish();
      }
    }

    public void deleteSyncTravelInstance(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSyncTravelInstance_call method_call = new deleteSyncTravelInstance_call(tc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSyncTravelInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TravelCommand tc;
      public deleteSyncTravelInstance_call(TravelCommand tc, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tc = tc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSyncTravelInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSyncTravelInstance_args args = new deleteSyncTravelInstance_args();
        args.setTc(tc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSyncTravelInstance();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("insert", new insert());
      processMap.put("batch_insert", new batch_insert());
      processMap.put("split", new split());
      processMap.put("rec_split", new rec_split());
      processMap.put("get_state", new get_state());
      processMap.put("read", new read());
      processMap.put("scan", new scan());
      processMap.put("echo", new echo());
      processMap.put("syncTravel", new syncTravel());
      processMap.put("syncTravelMaster", new syncTravelMaster());
      processMap.put("syncTravelRtn", new syncTravelRtn());
      processMap.put("syncTravelStart", new syncTravelStart());
      processMap.put("syncTravelExtend", new syncTravelExtend());
      processMap.put("syncTravelFinish", new syncTravelFinish());
      processMap.put("deleteSyncTravelInstance", new deleteSyncTravelInstance());
      return processMap;
    }

    public static class insert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insert_args> {
      public insert() {
        super("insert");
      }

      public insert_args getEmptyArgsInstance() {
        return new insert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insert_result getResult(I iface, insert_args args) throws org.apache.thrift.TException {
        insert_result result = new insert_result();
        try {
          result.success = iface.insert(args.src, args.dst, args.type, args.val, args.ts);
          result.setSuccessIsSet(true);
        } catch (RedirectException r) {
          result.r = r;
        }
        return result;
      }
    }

    public static class batch_insert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batch_insert_args> {
      public batch_insert() {
        super("batch_insert");
      }

      public batch_insert_args getEmptyArgsInstance() {
        return new batch_insert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batch_insert_result getResult(I iface, batch_insert_args args) throws org.apache.thrift.TException {
        batch_insert_result result = new batch_insert_result();
        try {
          result.success = iface.batch_insert(args.src, args.vid, args.batches);
          result.setSuccessIsSet(true);
        } catch (RedirectException r) {
          result.r = r;
        }
        return result;
      }
    }

    public static class split<I extends Iface> extends org.apache.thrift.ProcessFunction<I, split_args> {
      public split() {
        super("split");
      }

      public split_args getEmptyArgsInstance() {
        return new split_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public split_result getResult(I iface, split_args args) throws org.apache.thrift.TException {
        split_result result = new split_result();
        result.success = iface.split(args.src, args.vid, args.stage, args.bitmap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class rec_split<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rec_split_args> {
      public rec_split() {
        super("rec_split");
      }

      public rec_split_args getEmptyArgsInstance() {
        return new rec_split_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rec_split_result getResult(I iface, rec_split_args args) throws org.apache.thrift.TException {
        rec_split_result result = new rec_split_result();
        result.success = iface.rec_split(args.src, args.vid, args.batches);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class get_state<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_state_args> {
      public get_state() {
        super("get_state");
      }

      public get_state_args getEmptyArgsInstance() {
        return new get_state_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_state_result getResult(I iface, get_state_args args) throws org.apache.thrift.TException {
        get_state_result result = new get_state_result();
        result.success = iface.get_state();
        return result;
      }
    }

    public static class read<I extends Iface> extends org.apache.thrift.ProcessFunction<I, read_args> {
      public read() {
        super("read");
      }

      public read_args getEmptyArgsInstance() {
        return new read_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public read_result getResult(I iface, read_args args) throws org.apache.thrift.TException {
        read_result result = new read_result();
        try {
          result.success = iface.read(args.src, args.dst, args.type, args.ts);
        } catch (RedirectException r) {
          result.r = r;
        }
        return result;
      }
    }

    public static class scan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scan_args> {
      public scan() {
        super("scan");
      }

      public scan_args getEmptyArgsInstance() {
        return new scan_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public scan_result getResult(I iface, scan_args args) throws org.apache.thrift.TException {
        scan_result result = new scan_result();
        try {
          result.success = iface.scan(args.src, args.type, args.bitmap, args.ts1, args.ts2);
        } catch (RedirectException r) {
          result.r = r;
        }
        return result;
      }
    }

    public static class echo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo_args> {
      public echo() {
        super("echo");
      }

      public echo_args getEmptyArgsInstance() {
        return new echo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echo_result getResult(I iface, echo_args args) throws org.apache.thrift.TException {
        echo_result result = new echo_result();
        result.success = iface.echo(args.s, args.payload);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class syncTravel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, syncTravel_args> {
      public syncTravel() {
        super("syncTravel");
      }

      public syncTravel_args getEmptyArgsInstance() {
        return new syncTravel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public syncTravel_result getResult(I iface, syncTravel_args args) throws org.apache.thrift.TException {
        syncTravel_result result = new syncTravel_result();
        result.success = iface.syncTravel(args.tc);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class syncTravelMaster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, syncTravelMaster_args> {
      public syncTravelMaster() {
        super("syncTravelMaster");
      }

      public syncTravelMaster_args getEmptyArgsInstance() {
        return new syncTravelMaster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public syncTravelMaster_result getResult(I iface, syncTravelMaster_args args) throws org.apache.thrift.TException {
        syncTravelMaster_result result = new syncTravelMaster_result();
        result.success = iface.syncTravelMaster(args.tc);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class syncTravelRtn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, syncTravelRtn_args> {
      public syncTravelRtn() {
        super("syncTravelRtn");
      }

      public syncTravelRtn_args getEmptyArgsInstance() {
        return new syncTravelRtn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public syncTravelRtn_result getResult(I iface, syncTravelRtn_args args) throws org.apache.thrift.TException {
        syncTravelRtn_result result = new syncTravelRtn_result();
        result.success = iface.syncTravelRtn(args.tc);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class syncTravelStart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, syncTravelStart_args> {
      public syncTravelStart() {
        super("syncTravelStart");
      }

      public syncTravelStart_args getEmptyArgsInstance() {
        return new syncTravelStart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public syncTravelStart_result getResult(I iface, syncTravelStart_args args) throws org.apache.thrift.TException {
        syncTravelStart_result result = new syncTravelStart_result();
        result.success = iface.syncTravelStart(args.tc);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class syncTravelExtend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, syncTravelExtend_args> {
      public syncTravelExtend() {
        super("syncTravelExtend");
      }

      public syncTravelExtend_args getEmptyArgsInstance() {
        return new syncTravelExtend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public syncTravelExtend_result getResult(I iface, syncTravelExtend_args args) throws org.apache.thrift.TException {
        syncTravelExtend_result result = new syncTravelExtend_result();
        result.success = iface.syncTravelExtend(args.tc);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class syncTravelFinish<I extends Iface> extends org.apache.thrift.ProcessFunction<I, syncTravelFinish_args> {
      public syncTravelFinish() {
        super("syncTravelFinish");
      }

      public syncTravelFinish_args getEmptyArgsInstance() {
        return new syncTravelFinish_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public syncTravelFinish_result getResult(I iface, syncTravelFinish_args args) throws org.apache.thrift.TException {
        syncTravelFinish_result result = new syncTravelFinish_result();
        result.success = iface.syncTravelFinish(args.tc);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteSyncTravelInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSyncTravelInstance_args> {
      public deleteSyncTravelInstance() {
        super("deleteSyncTravelInstance");
      }

      public deleteSyncTravelInstance_args getEmptyArgsInstance() {
        return new deleteSyncTravelInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSyncTravelInstance_result getResult(I iface, deleteSyncTravelInstance_args args) throws org.apache.thrift.TException {
        deleteSyncTravelInstance_result result = new deleteSyncTravelInstance_result();
        result.success = iface.deleteSyncTravelInstance(args.tc);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("insert", new insert());
      processMap.put("batch_insert", new batch_insert());
      processMap.put("split", new split());
      processMap.put("rec_split", new rec_split());
      processMap.put("get_state", new get_state());
      processMap.put("read", new read());
      processMap.put("scan", new scan());
      processMap.put("echo", new echo());
      processMap.put("syncTravel", new syncTravel());
      processMap.put("syncTravelMaster", new syncTravelMaster());
      processMap.put("syncTravelRtn", new syncTravelRtn());
      processMap.put("syncTravelStart", new syncTravelStart());
      processMap.put("syncTravelExtend", new syncTravelExtend());
      processMap.put("syncTravelFinish", new syncTravelFinish());
      processMap.put("deleteSyncTravelInstance", new deleteSyncTravelInstance());
      return processMap;
    }

    public static class insert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insert_args, Integer> {
      public insert() {
        super("insert");
      }

      public insert_args getEmptyArgsInstance() {
        return new insert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            insert_result result = new insert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insert_result result = new insert_result();
            if (e instanceof RedirectException) {
                        result.r = (RedirectException) e;
                        result.setRIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.insert(args.src, args.dst, args.type, args.val, args.ts,resultHandler);
      }
    }

    public static class batch_insert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batch_insert_args, Integer> {
      public batch_insert() {
        super("batch_insert");
      }

      public batch_insert_args getEmptyArgsInstance() {
        return new batch_insert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batch_insert_result result = new batch_insert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batch_insert_result result = new batch_insert_result();
            if (e instanceof RedirectException) {
                        result.r = (RedirectException) e;
                        result.setRIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batch_insert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batch_insert(args.src, args.vid, args.batches,resultHandler);
      }
    }

    public static class split<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, split_args, Integer> {
      public split() {
        super("split");
      }

      public split_args getEmptyArgsInstance() {
        return new split_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            split_result result = new split_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            split_result result = new split_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, split_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.split(args.src, args.vid, args.stage, args.bitmap,resultHandler);
      }
    }

    public static class rec_split<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rec_split_args, Integer> {
      public rec_split() {
        super("rec_split");
      }

      public rec_split_args getEmptyArgsInstance() {
        return new rec_split_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            rec_split_result result = new rec_split_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rec_split_result result = new rec_split_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rec_split_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.rec_split(args.src, args.vid, args.batches,resultHandler);
      }
    }

    public static class get_state<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_state_args, List<Dist>> {
      public get_state() {
        super("get_state");
      }

      public get_state_args getEmptyArgsInstance() {
        return new get_state_args();
      }

      public AsyncMethodCallback<List<Dist>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Dist>>() { 
          public void onComplete(List<Dist> o) {
            get_state_result result = new get_state_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_state_result result = new get_state_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_state_args args, org.apache.thrift.async.AsyncMethodCallback<List<Dist>> resultHandler) throws TException {
        iface.get_state(resultHandler);
      }
    }

    public static class read<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, read_args, List<KeyValue>> {
      public read() {
        super("read");
      }

      public read_args getEmptyArgsInstance() {
        return new read_args();
      }

      public AsyncMethodCallback<List<KeyValue>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<KeyValue>>() { 
          public void onComplete(List<KeyValue> o) {
            read_result result = new read_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            read_result result = new read_result();
            if (e instanceof RedirectException) {
                        result.r = (RedirectException) e;
                        result.setRIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, read_args args, org.apache.thrift.async.AsyncMethodCallback<List<KeyValue>> resultHandler) throws TException {
        iface.read(args.src, args.dst, args.type, args.ts,resultHandler);
      }
    }

    public static class scan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scan_args, List<KeyValue>> {
      public scan() {
        super("scan");
      }

      public scan_args getEmptyArgsInstance() {
        return new scan_args();
      }

      public AsyncMethodCallback<List<KeyValue>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<KeyValue>>() { 
          public void onComplete(List<KeyValue> o) {
            scan_result result = new scan_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            scan_result result = new scan_result();
            if (e instanceof RedirectException) {
                        result.r = (RedirectException) e;
                        result.setRIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, scan_args args, org.apache.thrift.async.AsyncMethodCallback<List<KeyValue>> resultHandler) throws TException {
        iface.scan(args.src, args.type, args.bitmap, args.ts1, args.ts2,resultHandler);
      }
    }

    public static class echo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo_args, Integer> {
      public echo() {
        super("echo");
      }

      public echo_args getEmptyArgsInstance() {
        return new echo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            echo_result result = new echo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echo_result result = new echo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.echo(args.s, args.payload,resultHandler);
      }
    }

    public static class syncTravel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, syncTravel_args, Integer> {
      public syncTravel() {
        super("syncTravel");
      }

      public syncTravel_args getEmptyArgsInstance() {
        return new syncTravel_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            syncTravel_result result = new syncTravel_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            syncTravel_result result = new syncTravel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, syncTravel_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.syncTravel(args.tc,resultHandler);
      }
    }

    public static class syncTravelMaster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, syncTravelMaster_args, Integer> {
      public syncTravelMaster() {
        super("syncTravelMaster");
      }

      public syncTravelMaster_args getEmptyArgsInstance() {
        return new syncTravelMaster_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            syncTravelMaster_result result = new syncTravelMaster_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            syncTravelMaster_result result = new syncTravelMaster_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, syncTravelMaster_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.syncTravelMaster(args.tc,resultHandler);
      }
    }

    public static class syncTravelRtn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, syncTravelRtn_args, Integer> {
      public syncTravelRtn() {
        super("syncTravelRtn");
      }

      public syncTravelRtn_args getEmptyArgsInstance() {
        return new syncTravelRtn_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            syncTravelRtn_result result = new syncTravelRtn_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            syncTravelRtn_result result = new syncTravelRtn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, syncTravelRtn_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.syncTravelRtn(args.tc,resultHandler);
      }
    }

    public static class syncTravelStart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, syncTravelStart_args, Integer> {
      public syncTravelStart() {
        super("syncTravelStart");
      }

      public syncTravelStart_args getEmptyArgsInstance() {
        return new syncTravelStart_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            syncTravelStart_result result = new syncTravelStart_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            syncTravelStart_result result = new syncTravelStart_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, syncTravelStart_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.syncTravelStart(args.tc,resultHandler);
      }
    }

    public static class syncTravelExtend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, syncTravelExtend_args, Integer> {
      public syncTravelExtend() {
        super("syncTravelExtend");
      }

      public syncTravelExtend_args getEmptyArgsInstance() {
        return new syncTravelExtend_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            syncTravelExtend_result result = new syncTravelExtend_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            syncTravelExtend_result result = new syncTravelExtend_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, syncTravelExtend_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.syncTravelExtend(args.tc,resultHandler);
      }
    }

    public static class syncTravelFinish<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, syncTravelFinish_args, Integer> {
      public syncTravelFinish() {
        super("syncTravelFinish");
      }

      public syncTravelFinish_args getEmptyArgsInstance() {
        return new syncTravelFinish_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            syncTravelFinish_result result = new syncTravelFinish_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            syncTravelFinish_result result = new syncTravelFinish_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, syncTravelFinish_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.syncTravelFinish(args.tc,resultHandler);
      }
    }

    public static class deleteSyncTravelInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSyncTravelInstance_args, Integer> {
      public deleteSyncTravelInstance() {
        super("deleteSyncTravelInstance");
      }

      public deleteSyncTravelInstance_args getEmptyArgsInstance() {
        return new deleteSyncTravelInstance_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteSyncTravelInstance_result result = new deleteSyncTravelInstance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSyncTravelInstance_result result = new deleteSyncTravelInstance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSyncTravelInstance_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteSyncTravelInstance(args.tc,resultHandler);
      }
    }

  }

  public static class insert_args implements org.apache.thrift.TBase<insert_args, insert_args._Fields>, java.io.Serializable, Cloneable, Comparable<insert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insert_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DST_FIELD_DESC = new org.apache.thrift.protocol.TField("dst", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("val", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TS_FIELD_DESC = new org.apache.thrift.protocol.TField("ts", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insert_argsTupleSchemeFactory());
    }

    public ByteBuffer src; // required
    public ByteBuffer dst; // required
    public int type; // required
    public ByteBuffer val; // required
    public long ts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      DST((short)2, "dst"),
      TYPE((short)3, "type"),
      VAL((short)4, "val"),
      TS((short)5, "ts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // DST
            return DST;
          case 3: // TYPE
            return TYPE;
          case 4: // VAL
            return VAL;
          case 5: // TS
            return TS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __TS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.DST, new org.apache.thrift.meta_data.FieldMetaData("dst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VAL, new org.apache.thrift.meta_data.FieldMetaData("val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.TS, new org.apache.thrift.meta_data.FieldMetaData("ts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insert_args.class, metaDataMap);
    }

    public insert_args() {
    }

    public insert_args(
      ByteBuffer src,
      ByteBuffer dst,
      int type,
      ByteBuffer val,
      long ts)
    {
      this();
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      this.dst = org.apache.thrift.TBaseHelper.copyBinary(dst);
      this.type = type;
      setTypeIsSet(true);
      this.val = org.apache.thrift.TBaseHelper.copyBinary(val);
      this.ts = ts;
      setTsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insert_args(insert_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = org.apache.thrift.TBaseHelper.copyBinary(other.src);
      }
      if (other.isSetDst()) {
        this.dst = org.apache.thrift.TBaseHelper.copyBinary(other.dst);
      }
      this.type = other.type;
      if (other.isSetVal()) {
        this.val = org.apache.thrift.TBaseHelper.copyBinary(other.val);
      }
      this.ts = other.ts;
    }

    public insert_args deepCopy() {
      return new insert_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      this.dst = null;
      setTypeIsSet(false);
      this.type = 0;
      this.val = null;
      setTsIsSet(false);
      this.ts = 0;
    }

    public byte[] getSrc() {
      setSrc(org.apache.thrift.TBaseHelper.rightSize(src));
      return src == null ? null : src.array();
    }

    public ByteBuffer bufferForSrc() {
      return org.apache.thrift.TBaseHelper.copyBinary(src);
    }

    public insert_args setSrc(byte[] src) {
      this.src = src == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(src, src.length));
      return this;
    }

    public insert_args setSrc(ByteBuffer src) {
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public byte[] getDst() {
      setDst(org.apache.thrift.TBaseHelper.rightSize(dst));
      return dst == null ? null : dst.array();
    }

    public ByteBuffer bufferForDst() {
      return org.apache.thrift.TBaseHelper.copyBinary(dst);
    }

    public insert_args setDst(byte[] dst) {
      this.dst = dst == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(dst, dst.length));
      return this;
    }

    public insert_args setDst(ByteBuffer dst) {
      this.dst = org.apache.thrift.TBaseHelper.copyBinary(dst);
      return this;
    }

    public void unsetDst() {
      this.dst = null;
    }

    /** Returns true if field dst is set (has been assigned a value) and false otherwise */
    public boolean isSetDst() {
      return this.dst != null;
    }

    public void setDstIsSet(boolean value) {
      if (!value) {
        this.dst = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public insert_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public byte[] getVal() {
      setVal(org.apache.thrift.TBaseHelper.rightSize(val));
      return val == null ? null : val.array();
    }

    public ByteBuffer bufferForVal() {
      return org.apache.thrift.TBaseHelper.copyBinary(val);
    }

    public insert_args setVal(byte[] val) {
      this.val = val == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(val, val.length));
      return this;
    }

    public insert_args setVal(ByteBuffer val) {
      this.val = org.apache.thrift.TBaseHelper.copyBinary(val);
      return this;
    }

    public void unsetVal() {
      this.val = null;
    }

    /** Returns true if field val is set (has been assigned a value) and false otherwise */
    public boolean isSetVal() {
      return this.val != null;
    }

    public void setValIsSet(boolean value) {
      if (!value) {
        this.val = null;
      }
    }

    public long getTs() {
      return this.ts;
    }

    public insert_args setTs(long ts) {
      this.ts = ts;
      setTsIsSet(true);
      return this;
    }

    public void unsetTs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TS_ISSET_ID);
    }

    /** Returns true if field ts is set (has been assigned a value) and false otherwise */
    public boolean isSetTs() {
      return EncodingUtils.testBit(__isset_bitfield, __TS_ISSET_ID);
    }

    public void setTsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((ByteBuffer)value);
        }
        break;

      case DST:
        if (value == null) {
          unsetDst();
        } else {
          setDst((ByteBuffer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case VAL:
        if (value == null) {
          unsetVal();
        } else {
          setVal((ByteBuffer)value);
        }
        break;

      case TS:
        if (value == null) {
          unsetTs();
        } else {
          setTs((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case DST:
        return getDst();

      case TYPE:
        return Integer.valueOf(getType());

      case VAL:
        return getVal();

      case TS:
        return Long.valueOf(getTs());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case DST:
        return isSetDst();
      case TYPE:
        return isSetType();
      case VAL:
        return isSetVal();
      case TS:
        return isSetTs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insert_args)
        return this.equals((insert_args)that);
      return false;
    }

    public boolean equals(insert_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_dst = true && this.isSetDst();
      boolean that_present_dst = true && that.isSetDst();
      if (this_present_dst || that_present_dst) {
        if (!(this_present_dst && that_present_dst))
          return false;
        if (!this.dst.equals(that.dst))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_val = true && this.isSetVal();
      boolean that_present_val = true && that.isSetVal();
      if (this_present_val || that_present_val) {
        if (!(this_present_val && that_present_val))
          return false;
        if (!this.val.equals(that.val))
          return false;
      }

      boolean this_present_ts = true;
      boolean that_present_ts = true;
      if (this_present_ts || that_present_ts) {
        if (!(this_present_ts && that_present_ts))
          return false;
        if (this.ts != that.ts)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true && (isSetSrc());
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_dst = true && (isSetDst());
      list.add(present_dst);
      if (present_dst)
        list.add(dst);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_val = true && (isSetVal());
      list.add(present_val);
      if (present_val)
        list.add(val);

      boolean present_ts = true;
      list.add(present_ts);
      if (present_ts)
        list.add(ts);

      return list.hashCode();
    }

    @Override
    public int compareTo(insert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDst()).compareTo(other.isSetDst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dst, other.dst);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVal()).compareTo(other.isSetVal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.val, other.val);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTs()).compareTo(other.isSetTs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ts, other.ts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insert_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.src, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dst:");
      if (this.dst == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.dst, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("val:");
      if (this.val == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.val, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ts:");
      sb.append(this.ts);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insert_argsStandardSchemeFactory implements SchemeFactory {
      public insert_argsStandardScheme getScheme() {
        return new insert_argsStandardScheme();
      }
    }

    private static class insert_argsStandardScheme extends StandardScheme<insert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.src = iprot.readBinary();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dst = iprot.readBinary();
                struct.setDstIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.val = iprot.readBinary();
                struct.setValIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ts = iprot.readI64();
                struct.setTsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          oprot.writeBinary(struct.src);
          oprot.writeFieldEnd();
        }
        if (struct.dst != null) {
          oprot.writeFieldBegin(DST_FIELD_DESC);
          oprot.writeBinary(struct.dst);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.val != null) {
          oprot.writeFieldBegin(VAL_FIELD_DESC);
          oprot.writeBinary(struct.val);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TS_FIELD_DESC);
        oprot.writeI64(struct.ts);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insert_argsTupleSchemeFactory implements SchemeFactory {
      public insert_argsTupleScheme getScheme() {
        return new insert_argsTupleScheme();
      }
    }

    private static class insert_argsTupleScheme extends TupleScheme<insert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetDst()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetVal()) {
          optionals.set(3);
        }
        if (struct.isSetTs()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSrc()) {
          oprot.writeBinary(struct.src);
        }
        if (struct.isSetDst()) {
          oprot.writeBinary(struct.dst);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetVal()) {
          oprot.writeBinary(struct.val);
        }
        if (struct.isSetTs()) {
          oprot.writeI64(struct.ts);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.src = iprot.readBinary();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dst = iprot.readBinary();
          struct.setDstIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.val = iprot.readBinary();
          struct.setValIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ts = iprot.readI64();
          struct.setTsIsSet(true);
        }
      }
    }

  }

  public static class insert_result implements org.apache.thrift.TBase<insert_result, insert_result._Fields>, java.io.Serializable, Cloneable, Comparable<insert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField R_FIELD_DESC = new org.apache.thrift.protocol.TField("r", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insert_resultTupleSchemeFactory());
    }

    public int success; // required
    public RedirectException r; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      R((short)1, "r");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // R
            return R;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.R, new org.apache.thrift.meta_data.FieldMetaData("r", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insert_result.class, metaDataMap);
    }

    public insert_result() {
    }

    public insert_result(
      int success,
      RedirectException r)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.r = r;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insert_result(insert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetR()) {
        this.r = new RedirectException(other.r);
      }
    }

    public insert_result deepCopy() {
      return new insert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.r = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public insert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public RedirectException getR() {
      return this.r;
    }

    public insert_result setR(RedirectException r) {
      this.r = r;
      return this;
    }

    public void unsetR() {
      this.r = null;
    }

    /** Returns true if field r is set (has been assigned a value) and false otherwise */
    public boolean isSetR() {
      return this.r != null;
    }

    public void setRIsSet(boolean value) {
      if (!value) {
        this.r = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case R:
        if (value == null) {
          unsetR();
        } else {
          setR((RedirectException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case R:
        return getR();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case R:
        return isSetR();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insert_result)
        return this.equals((insert_result)that);
      return false;
    }

    public boolean equals(insert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_r = true && this.isSetR();
      boolean that_present_r = true && that.isSetR();
      if (this_present_r || that_present_r) {
        if (!(this_present_r && that_present_r))
          return false;
        if (!this.r.equals(that.r))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_r = true && (isSetR());
      list.add(present_r);
      if (present_r)
        list.add(r);

      return list.hashCode();
    }

    @Override
    public int compareTo(insert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetR()).compareTo(other.isSetR());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetR()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.r, other.r);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("r:");
      if (this.r == null) {
        sb.append("null");
      } else {
        sb.append(this.r);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insert_resultStandardSchemeFactory implements SchemeFactory {
      public insert_resultStandardScheme getScheme() {
        return new insert_resultStandardScheme();
      }
    }

    private static class insert_resultStandardScheme extends StandardScheme<insert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // R
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.r = new RedirectException();
                struct.r.read(iprot);
                struct.setRIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.r != null) {
          oprot.writeFieldBegin(R_FIELD_DESC);
          struct.r.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insert_resultTupleSchemeFactory implements SchemeFactory {
      public insert_resultTupleScheme getScheme() {
        return new insert_resultTupleScheme();
      }
    }

    private static class insert_resultTupleScheme extends TupleScheme<insert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetR()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetR()) {
          struct.r.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.r = new RedirectException();
          struct.r.read(iprot);
          struct.setRIsSet(true);
        }
      }
    }

  }

  public static class batch_insert_args implements org.apache.thrift.TBase<batch_insert_args, batch_insert_args._Fields>, java.io.Serializable, Cloneable, Comparable<batch_insert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batch_insert_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField BATCHES_FIELD_DESC = new org.apache.thrift.protocol.TField("batches", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batch_insert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batch_insert_argsTupleSchemeFactory());
    }

    public ByteBuffer src; // required
    public int vid; // required
    public List<KeyValue> batches; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      VID((short)2, "vid"),
      BATCHES((short)3, "batches");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // VID
            return VID;
          case 3: // BATCHES
            return BATCHES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BATCHES, new org.apache.thrift.meta_data.FieldMetaData("batches", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batch_insert_args.class, metaDataMap);
    }

    public batch_insert_args() {
    }

    public batch_insert_args(
      ByteBuffer src,
      int vid,
      List<KeyValue> batches)
    {
      this();
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      this.vid = vid;
      setVidIsSet(true);
      this.batches = batches;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batch_insert_args(batch_insert_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = org.apache.thrift.TBaseHelper.copyBinary(other.src);
      }
      this.vid = other.vid;
      if (other.isSetBatches()) {
        List<KeyValue> __this__batches = new ArrayList<KeyValue>(other.batches.size());
        for (KeyValue other_element : other.batches) {
          __this__batches.add(new KeyValue(other_element));
        }
        this.batches = __this__batches;
      }
    }

    public batch_insert_args deepCopy() {
      return new batch_insert_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      setVidIsSet(false);
      this.vid = 0;
      this.batches = null;
    }

    public byte[] getSrc() {
      setSrc(org.apache.thrift.TBaseHelper.rightSize(src));
      return src == null ? null : src.array();
    }

    public ByteBuffer bufferForSrc() {
      return org.apache.thrift.TBaseHelper.copyBinary(src);
    }

    public batch_insert_args setSrc(byte[] src) {
      this.src = src == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(src, src.length));
      return this;
    }

    public batch_insert_args setSrc(ByteBuffer src) {
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public int getVid() {
      return this.vid;
    }

    public batch_insert_args setVid(int vid) {
      this.vid = vid;
      setVidIsSet(true);
      return this;
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public int getBatchesSize() {
      return (this.batches == null) ? 0 : this.batches.size();
    }

    public java.util.Iterator<KeyValue> getBatchesIterator() {
      return (this.batches == null) ? null : this.batches.iterator();
    }

    public void addToBatches(KeyValue elem) {
      if (this.batches == null) {
        this.batches = new ArrayList<KeyValue>();
      }
      this.batches.add(elem);
    }

    public List<KeyValue> getBatches() {
      return this.batches;
    }

    public batch_insert_args setBatches(List<KeyValue> batches) {
      this.batches = batches;
      return this;
    }

    public void unsetBatches() {
      this.batches = null;
    }

    /** Returns true if field batches is set (has been assigned a value) and false otherwise */
    public boolean isSetBatches() {
      return this.batches != null;
    }

    public void setBatchesIsSet(boolean value) {
      if (!value) {
        this.batches = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((ByteBuffer)value);
        }
        break;

      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Integer)value);
        }
        break;

      case BATCHES:
        if (value == null) {
          unsetBatches();
        } else {
          setBatches((List<KeyValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case VID:
        return Integer.valueOf(getVid());

      case BATCHES:
        return getBatches();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case VID:
        return isSetVid();
      case BATCHES:
        return isSetBatches();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batch_insert_args)
        return this.equals((batch_insert_args)that);
      return false;
    }

    public boolean equals(batch_insert_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      boolean this_present_batches = true && this.isSetBatches();
      boolean that_present_batches = true && that.isSetBatches();
      if (this_present_batches || that_present_batches) {
        if (!(this_present_batches && that_present_batches))
          return false;
        if (!this.batches.equals(that.batches))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true && (isSetSrc());
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_vid = true;
      list.add(present_vid);
      if (present_vid)
        list.add(vid);

      boolean present_batches = true && (isSetBatches());
      list.add(present_batches);
      if (present_batches)
        list.add(batches);

      return list.hashCode();
    }

    @Override
    public int compareTo(batch_insert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVid()).compareTo(other.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, other.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBatches()).compareTo(other.isSetBatches());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatches()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batches, other.batches);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batch_insert_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.src, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("batches:");
      if (this.batches == null) {
        sb.append("null");
      } else {
        sb.append(this.batches);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batch_insert_argsStandardSchemeFactory implements SchemeFactory {
      public batch_insert_argsStandardScheme getScheme() {
        return new batch_insert_argsStandardScheme();
      }
    }

    private static class batch_insert_argsStandardScheme extends StandardScheme<batch_insert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batch_insert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.src = iprot.readBinary();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vid = iprot.readI32();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BATCHES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.batches = new ArrayList<KeyValue>(_list40.size);
                  KeyValue _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new KeyValue();
                    _elem41.read(iprot);
                    struct.batches.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setBatchesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batch_insert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          oprot.writeBinary(struct.src);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI32(struct.vid);
        oprot.writeFieldEnd();
        if (struct.batches != null) {
          oprot.writeFieldBegin(BATCHES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.batches.size()));
            for (KeyValue _iter43 : struct.batches)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batch_insert_argsTupleSchemeFactory implements SchemeFactory {
      public batch_insert_argsTupleScheme getScheme() {
        return new batch_insert_argsTupleScheme();
      }
    }

    private static class batch_insert_argsTupleScheme extends TupleScheme<batch_insert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batch_insert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetVid()) {
          optionals.set(1);
        }
        if (struct.isSetBatches()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSrc()) {
          oprot.writeBinary(struct.src);
        }
        if (struct.isSetVid()) {
          oprot.writeI32(struct.vid);
        }
        if (struct.isSetBatches()) {
          {
            oprot.writeI32(struct.batches.size());
            for (KeyValue _iter44 : struct.batches)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batch_insert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.src = iprot.readBinary();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vid = iprot.readI32();
          struct.setVidIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.batches = new ArrayList<KeyValue>(_list45.size);
            KeyValue _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new KeyValue();
              _elem46.read(iprot);
              struct.batches.add(_elem46);
            }
          }
          struct.setBatchesIsSet(true);
        }
      }
    }

  }

  public static class batch_insert_result implements org.apache.thrift.TBase<batch_insert_result, batch_insert_result._Fields>, java.io.Serializable, Cloneable, Comparable<batch_insert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batch_insert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField R_FIELD_DESC = new org.apache.thrift.protocol.TField("r", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batch_insert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batch_insert_resultTupleSchemeFactory());
    }

    public int success; // required
    public RedirectException r; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      R((short)1, "r");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // R
            return R;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.R, new org.apache.thrift.meta_data.FieldMetaData("r", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batch_insert_result.class, metaDataMap);
    }

    public batch_insert_result() {
    }

    public batch_insert_result(
      int success,
      RedirectException r)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.r = r;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batch_insert_result(batch_insert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetR()) {
        this.r = new RedirectException(other.r);
      }
    }

    public batch_insert_result deepCopy() {
      return new batch_insert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.r = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public batch_insert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public RedirectException getR() {
      return this.r;
    }

    public batch_insert_result setR(RedirectException r) {
      this.r = r;
      return this;
    }

    public void unsetR() {
      this.r = null;
    }

    /** Returns true if field r is set (has been assigned a value) and false otherwise */
    public boolean isSetR() {
      return this.r != null;
    }

    public void setRIsSet(boolean value) {
      if (!value) {
        this.r = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case R:
        if (value == null) {
          unsetR();
        } else {
          setR((RedirectException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case R:
        return getR();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case R:
        return isSetR();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batch_insert_result)
        return this.equals((batch_insert_result)that);
      return false;
    }

    public boolean equals(batch_insert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_r = true && this.isSetR();
      boolean that_present_r = true && that.isSetR();
      if (this_present_r || that_present_r) {
        if (!(this_present_r && that_present_r))
          return false;
        if (!this.r.equals(that.r))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_r = true && (isSetR());
      list.add(present_r);
      if (present_r)
        list.add(r);

      return list.hashCode();
    }

    @Override
    public int compareTo(batch_insert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetR()).compareTo(other.isSetR());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetR()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.r, other.r);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batch_insert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("r:");
      if (this.r == null) {
        sb.append("null");
      } else {
        sb.append(this.r);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batch_insert_resultStandardSchemeFactory implements SchemeFactory {
      public batch_insert_resultStandardScheme getScheme() {
        return new batch_insert_resultStandardScheme();
      }
    }

    private static class batch_insert_resultStandardScheme extends StandardScheme<batch_insert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batch_insert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // R
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.r = new RedirectException();
                struct.r.read(iprot);
                struct.setRIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batch_insert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.r != null) {
          oprot.writeFieldBegin(R_FIELD_DESC);
          struct.r.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batch_insert_resultTupleSchemeFactory implements SchemeFactory {
      public batch_insert_resultTupleScheme getScheme() {
        return new batch_insert_resultTupleScheme();
      }
    }

    private static class batch_insert_resultTupleScheme extends TupleScheme<batch_insert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batch_insert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetR()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetR()) {
          struct.r.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batch_insert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.r = new RedirectException();
          struct.r.read(iprot);
          struct.setRIsSet(true);
        }
      }
    }

  }

  public static class split_args implements org.apache.thrift.TBase<split_args, split_args._Fields>, java.io.Serializable, Cloneable, Comparable<split_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("split_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField BITMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("bitmap", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new split_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new split_argsTupleSchemeFactory());
    }

    public ByteBuffer src; // required
    public int vid; // required
    public int stage; // required
    public ByteBuffer bitmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      VID((short)2, "vid"),
      STAGE((short)3, "stage"),
      BITMAP((short)4, "bitmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // VID
            return VID;
          case 3: // STAGE
            return STAGE;
          case 4: // BITMAP
            return BITMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VID_ISSET_ID = 0;
    private static final int __STAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BITMAP, new org.apache.thrift.meta_data.FieldMetaData("bitmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(split_args.class, metaDataMap);
    }

    public split_args() {
    }

    public split_args(
      ByteBuffer src,
      int vid,
      int stage,
      ByteBuffer bitmap)
    {
      this();
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      this.vid = vid;
      setVidIsSet(true);
      this.stage = stage;
      setStageIsSet(true);
      this.bitmap = org.apache.thrift.TBaseHelper.copyBinary(bitmap);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public split_args(split_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = org.apache.thrift.TBaseHelper.copyBinary(other.src);
      }
      this.vid = other.vid;
      this.stage = other.stage;
      if (other.isSetBitmap()) {
        this.bitmap = org.apache.thrift.TBaseHelper.copyBinary(other.bitmap);
      }
    }

    public split_args deepCopy() {
      return new split_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      setVidIsSet(false);
      this.vid = 0;
      setStageIsSet(false);
      this.stage = 0;
      this.bitmap = null;
    }

    public byte[] getSrc() {
      setSrc(org.apache.thrift.TBaseHelper.rightSize(src));
      return src == null ? null : src.array();
    }

    public ByteBuffer bufferForSrc() {
      return org.apache.thrift.TBaseHelper.copyBinary(src);
    }

    public split_args setSrc(byte[] src) {
      this.src = src == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(src, src.length));
      return this;
    }

    public split_args setSrc(ByteBuffer src) {
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public int getVid() {
      return this.vid;
    }

    public split_args setVid(int vid) {
      this.vid = vid;
      setVidIsSet(true);
      return this;
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public int getStage() {
      return this.stage;
    }

    public split_args setStage(int stage) {
      this.stage = stage;
      setStageIsSet(true);
      return this;
    }

    public void unsetStage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGE_ISSET_ID);
    }

    /** Returns true if field stage is set (has been assigned a value) and false otherwise */
    public boolean isSetStage() {
      return EncodingUtils.testBit(__isset_bitfield, __STAGE_ISSET_ID);
    }

    public void setStageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGE_ISSET_ID, value);
    }

    public byte[] getBitmap() {
      setBitmap(org.apache.thrift.TBaseHelper.rightSize(bitmap));
      return bitmap == null ? null : bitmap.array();
    }

    public ByteBuffer bufferForBitmap() {
      return org.apache.thrift.TBaseHelper.copyBinary(bitmap);
    }

    public split_args setBitmap(byte[] bitmap) {
      this.bitmap = bitmap == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(bitmap, bitmap.length));
      return this;
    }

    public split_args setBitmap(ByteBuffer bitmap) {
      this.bitmap = org.apache.thrift.TBaseHelper.copyBinary(bitmap);
      return this;
    }

    public void unsetBitmap() {
      this.bitmap = null;
    }

    /** Returns true if field bitmap is set (has been assigned a value) and false otherwise */
    public boolean isSetBitmap() {
      return this.bitmap != null;
    }

    public void setBitmapIsSet(boolean value) {
      if (!value) {
        this.bitmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((ByteBuffer)value);
        }
        break;

      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Integer)value);
        }
        break;

      case STAGE:
        if (value == null) {
          unsetStage();
        } else {
          setStage((Integer)value);
        }
        break;

      case BITMAP:
        if (value == null) {
          unsetBitmap();
        } else {
          setBitmap((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case VID:
        return Integer.valueOf(getVid());

      case STAGE:
        return Integer.valueOf(getStage());

      case BITMAP:
        return getBitmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case VID:
        return isSetVid();
      case STAGE:
        return isSetStage();
      case BITMAP:
        return isSetBitmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof split_args)
        return this.equals((split_args)that);
      return false;
    }

    public boolean equals(split_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      boolean this_present_stage = true;
      boolean that_present_stage = true;
      if (this_present_stage || that_present_stage) {
        if (!(this_present_stage && that_present_stage))
          return false;
        if (this.stage != that.stage)
          return false;
      }

      boolean this_present_bitmap = true && this.isSetBitmap();
      boolean that_present_bitmap = true && that.isSetBitmap();
      if (this_present_bitmap || that_present_bitmap) {
        if (!(this_present_bitmap && that_present_bitmap))
          return false;
        if (!this.bitmap.equals(that.bitmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true && (isSetSrc());
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_vid = true;
      list.add(present_vid);
      if (present_vid)
        list.add(vid);

      boolean present_stage = true;
      list.add(present_stage);
      if (present_stage)
        list.add(stage);

      boolean present_bitmap = true && (isSetBitmap());
      list.add(present_bitmap);
      if (present_bitmap)
        list.add(bitmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(split_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVid()).compareTo(other.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, other.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBitmap()).compareTo(other.isSetBitmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBitmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bitmap, other.bitmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("split_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.src, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stage:");
      sb.append(this.stage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bitmap:");
      if (this.bitmap == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bitmap, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class split_argsStandardSchemeFactory implements SchemeFactory {
      public split_argsStandardScheme getScheme() {
        return new split_argsStandardScheme();
      }
    }

    private static class split_argsStandardScheme extends StandardScheme<split_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, split_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.src = iprot.readBinary();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vid = iprot.readI32();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stage = iprot.readI32();
                struct.setStageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BITMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bitmap = iprot.readBinary();
                struct.setBitmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, split_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          oprot.writeBinary(struct.src);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI32(struct.vid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STAGE_FIELD_DESC);
        oprot.writeI32(struct.stage);
        oprot.writeFieldEnd();
        if (struct.bitmap != null) {
          oprot.writeFieldBegin(BITMAP_FIELD_DESC);
          oprot.writeBinary(struct.bitmap);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class split_argsTupleSchemeFactory implements SchemeFactory {
      public split_argsTupleScheme getScheme() {
        return new split_argsTupleScheme();
      }
    }

    private static class split_argsTupleScheme extends TupleScheme<split_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, split_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetVid()) {
          optionals.set(1);
        }
        if (struct.isSetStage()) {
          optionals.set(2);
        }
        if (struct.isSetBitmap()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSrc()) {
          oprot.writeBinary(struct.src);
        }
        if (struct.isSetVid()) {
          oprot.writeI32(struct.vid);
        }
        if (struct.isSetStage()) {
          oprot.writeI32(struct.stage);
        }
        if (struct.isSetBitmap()) {
          oprot.writeBinary(struct.bitmap);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, split_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.src = iprot.readBinary();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vid = iprot.readI32();
          struct.setVidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stage = iprot.readI32();
          struct.setStageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.bitmap = iprot.readBinary();
          struct.setBitmapIsSet(true);
        }
      }
    }

  }

  public static class split_result implements org.apache.thrift.TBase<split_result, split_result._Fields>, java.io.Serializable, Cloneable, Comparable<split_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("split_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new split_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new split_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(split_result.class, metaDataMap);
    }

    public split_result() {
    }

    public split_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public split_result(split_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public split_result deepCopy() {
      return new split_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public split_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof split_result)
        return this.equals((split_result)that);
      return false;
    }

    public boolean equals(split_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(split_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("split_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class split_resultStandardSchemeFactory implements SchemeFactory {
      public split_resultStandardScheme getScheme() {
        return new split_resultStandardScheme();
      }
    }

    private static class split_resultStandardScheme extends StandardScheme<split_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, split_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, split_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class split_resultTupleSchemeFactory implements SchemeFactory {
      public split_resultTupleScheme getScheme() {
        return new split_resultTupleScheme();
      }
    }

    private static class split_resultTupleScheme extends TupleScheme<split_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, split_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, split_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rec_split_args implements org.apache.thrift.TBase<rec_split_args, rec_split_args._Fields>, java.io.Serializable, Cloneable, Comparable<rec_split_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rec_split_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField BATCHES_FIELD_DESC = new org.apache.thrift.protocol.TField("batches", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rec_split_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rec_split_argsTupleSchemeFactory());
    }

    public ByteBuffer src; // required
    public int vid; // required
    public List<KeyValue> batches; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      VID((short)2, "vid"),
      BATCHES((short)3, "batches");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // VID
            return VID;
          case 3: // BATCHES
            return BATCHES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BATCHES, new org.apache.thrift.meta_data.FieldMetaData("batches", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rec_split_args.class, metaDataMap);
    }

    public rec_split_args() {
    }

    public rec_split_args(
      ByteBuffer src,
      int vid,
      List<KeyValue> batches)
    {
      this();
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      this.vid = vid;
      setVidIsSet(true);
      this.batches = batches;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rec_split_args(rec_split_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = org.apache.thrift.TBaseHelper.copyBinary(other.src);
      }
      this.vid = other.vid;
      if (other.isSetBatches()) {
        List<KeyValue> __this__batches = new ArrayList<KeyValue>(other.batches.size());
        for (KeyValue other_element : other.batches) {
          __this__batches.add(new KeyValue(other_element));
        }
        this.batches = __this__batches;
      }
    }

    public rec_split_args deepCopy() {
      return new rec_split_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      setVidIsSet(false);
      this.vid = 0;
      this.batches = null;
    }

    public byte[] getSrc() {
      setSrc(org.apache.thrift.TBaseHelper.rightSize(src));
      return src == null ? null : src.array();
    }

    public ByteBuffer bufferForSrc() {
      return org.apache.thrift.TBaseHelper.copyBinary(src);
    }

    public rec_split_args setSrc(byte[] src) {
      this.src = src == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(src, src.length));
      return this;
    }

    public rec_split_args setSrc(ByteBuffer src) {
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public int getVid() {
      return this.vid;
    }

    public rec_split_args setVid(int vid) {
      this.vid = vid;
      setVidIsSet(true);
      return this;
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public int getBatchesSize() {
      return (this.batches == null) ? 0 : this.batches.size();
    }

    public java.util.Iterator<KeyValue> getBatchesIterator() {
      return (this.batches == null) ? null : this.batches.iterator();
    }

    public void addToBatches(KeyValue elem) {
      if (this.batches == null) {
        this.batches = new ArrayList<KeyValue>();
      }
      this.batches.add(elem);
    }

    public List<KeyValue> getBatches() {
      return this.batches;
    }

    public rec_split_args setBatches(List<KeyValue> batches) {
      this.batches = batches;
      return this;
    }

    public void unsetBatches() {
      this.batches = null;
    }

    /** Returns true if field batches is set (has been assigned a value) and false otherwise */
    public boolean isSetBatches() {
      return this.batches != null;
    }

    public void setBatchesIsSet(boolean value) {
      if (!value) {
        this.batches = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((ByteBuffer)value);
        }
        break;

      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Integer)value);
        }
        break;

      case BATCHES:
        if (value == null) {
          unsetBatches();
        } else {
          setBatches((List<KeyValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case VID:
        return Integer.valueOf(getVid());

      case BATCHES:
        return getBatches();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case VID:
        return isSetVid();
      case BATCHES:
        return isSetBatches();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rec_split_args)
        return this.equals((rec_split_args)that);
      return false;
    }

    public boolean equals(rec_split_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      boolean this_present_batches = true && this.isSetBatches();
      boolean that_present_batches = true && that.isSetBatches();
      if (this_present_batches || that_present_batches) {
        if (!(this_present_batches && that_present_batches))
          return false;
        if (!this.batches.equals(that.batches))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true && (isSetSrc());
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_vid = true;
      list.add(present_vid);
      if (present_vid)
        list.add(vid);

      boolean present_batches = true && (isSetBatches());
      list.add(present_batches);
      if (present_batches)
        list.add(batches);

      return list.hashCode();
    }

    @Override
    public int compareTo(rec_split_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVid()).compareTo(other.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, other.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBatches()).compareTo(other.isSetBatches());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatches()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batches, other.batches);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rec_split_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.src, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("batches:");
      if (this.batches == null) {
        sb.append("null");
      } else {
        sb.append(this.batches);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rec_split_argsStandardSchemeFactory implements SchemeFactory {
      public rec_split_argsStandardScheme getScheme() {
        return new rec_split_argsStandardScheme();
      }
    }

    private static class rec_split_argsStandardScheme extends StandardScheme<rec_split_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rec_split_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.src = iprot.readBinary();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vid = iprot.readI32();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BATCHES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.batches = new ArrayList<KeyValue>(_list48.size);
                  KeyValue _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new KeyValue();
                    _elem49.read(iprot);
                    struct.batches.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setBatchesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rec_split_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          oprot.writeBinary(struct.src);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI32(struct.vid);
        oprot.writeFieldEnd();
        if (struct.batches != null) {
          oprot.writeFieldBegin(BATCHES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.batches.size()));
            for (KeyValue _iter51 : struct.batches)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rec_split_argsTupleSchemeFactory implements SchemeFactory {
      public rec_split_argsTupleScheme getScheme() {
        return new rec_split_argsTupleScheme();
      }
    }

    private static class rec_split_argsTupleScheme extends TupleScheme<rec_split_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rec_split_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetVid()) {
          optionals.set(1);
        }
        if (struct.isSetBatches()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSrc()) {
          oprot.writeBinary(struct.src);
        }
        if (struct.isSetVid()) {
          oprot.writeI32(struct.vid);
        }
        if (struct.isSetBatches()) {
          {
            oprot.writeI32(struct.batches.size());
            for (KeyValue _iter52 : struct.batches)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rec_split_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.src = iprot.readBinary();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vid = iprot.readI32();
          struct.setVidIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.batches = new ArrayList<KeyValue>(_list53.size);
            KeyValue _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new KeyValue();
              _elem54.read(iprot);
              struct.batches.add(_elem54);
            }
          }
          struct.setBatchesIsSet(true);
        }
      }
    }

  }

  public static class rec_split_result implements org.apache.thrift.TBase<rec_split_result, rec_split_result._Fields>, java.io.Serializable, Cloneable, Comparable<rec_split_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rec_split_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rec_split_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rec_split_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rec_split_result.class, metaDataMap);
    }

    public rec_split_result() {
    }

    public rec_split_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rec_split_result(rec_split_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public rec_split_result deepCopy() {
      return new rec_split_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public rec_split_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rec_split_result)
        return this.equals((rec_split_result)that);
      return false;
    }

    public boolean equals(rec_split_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rec_split_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rec_split_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rec_split_resultStandardSchemeFactory implements SchemeFactory {
      public rec_split_resultStandardScheme getScheme() {
        return new rec_split_resultStandardScheme();
      }
    }

    private static class rec_split_resultStandardScheme extends StandardScheme<rec_split_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rec_split_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rec_split_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rec_split_resultTupleSchemeFactory implements SchemeFactory {
      public rec_split_resultTupleScheme getScheme() {
        return new rec_split_resultTupleScheme();
      }
    }

    private static class rec_split_resultTupleScheme extends TupleScheme<rec_split_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rec_split_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rec_split_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_state_args implements org.apache.thrift.TBase<get_state_args, get_state_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_state_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_state_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_state_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_state_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_state_args.class, metaDataMap);
    }

    public get_state_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_state_args(get_state_args other) {
    }

    public get_state_args deepCopy() {
      return new get_state_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_state_args)
        return this.equals((get_state_args)that);
      return false;
    }

    public boolean equals(get_state_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(get_state_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_state_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_state_argsStandardSchemeFactory implements SchemeFactory {
      public get_state_argsStandardScheme getScheme() {
        return new get_state_argsStandardScheme();
      }
    }

    private static class get_state_argsStandardScheme extends StandardScheme<get_state_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_state_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_state_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_state_argsTupleSchemeFactory implements SchemeFactory {
      public get_state_argsTupleScheme getScheme() {
        return new get_state_argsTupleScheme();
      }
    }

    private static class get_state_argsTupleScheme extends TupleScheme<get_state_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_state_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_state_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_state_result implements org.apache.thrift.TBase<get_state_result, get_state_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_state_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_state_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_state_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_state_resultTupleSchemeFactory());
    }

    public List<Dist> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dist.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_state_result.class, metaDataMap);
    }

    public get_state_result() {
    }

    public get_state_result(
      List<Dist> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_state_result(get_state_result other) {
      if (other.isSetSuccess()) {
        List<Dist> __this__success = new ArrayList<Dist>(other.success.size());
        for (Dist other_element : other.success) {
          __this__success.add(new Dist(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_state_result deepCopy() {
      return new get_state_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Dist> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Dist elem) {
      if (this.success == null) {
        this.success = new ArrayList<Dist>();
      }
      this.success.add(elem);
    }

    public List<Dist> getSuccess() {
      return this.success;
    }

    public get_state_result setSuccess(List<Dist> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Dist>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_state_result)
        return this.equals((get_state_result)that);
      return false;
    }

    public boolean equals(get_state_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_state_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_state_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_state_resultStandardSchemeFactory implements SchemeFactory {
      public get_state_resultStandardScheme getScheme() {
        return new get_state_resultStandardScheme();
      }
    }

    private static class get_state_resultStandardScheme extends StandardScheme<get_state_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_state_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<Dist>(_list56.size);
                  Dist _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new Dist();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_state_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Dist _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_state_resultTupleSchemeFactory implements SchemeFactory {
      public get_state_resultTupleScheme getScheme() {
        return new get_state_resultTupleScheme();
      }
    }

    private static class get_state_resultTupleScheme extends TupleScheme<get_state_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_state_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Dist _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_state_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Dist>(_list61.size);
            Dist _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new Dist();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class read_args implements org.apache.thrift.TBase<read_args, read_args._Fields>, java.io.Serializable, Cloneable, Comparable<read_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DST_FIELD_DESC = new org.apache.thrift.protocol.TField("dst", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField TS_FIELD_DESC = new org.apache.thrift.protocol.TField("ts", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read_argsTupleSchemeFactory());
    }

    public ByteBuffer src; // required
    public ByteBuffer dst; // required
    public int type; // required
    public long ts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      DST((short)2, "dst"),
      TYPE((short)3, "type"),
      TS((short)4, "ts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // DST
            return DST;
          case 3: // TYPE
            return TYPE;
          case 4: // TS
            return TS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __TS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.DST, new org.apache.thrift.meta_data.FieldMetaData("dst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TS, new org.apache.thrift.meta_data.FieldMetaData("ts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read_args.class, metaDataMap);
    }

    public read_args() {
    }

    public read_args(
      ByteBuffer src,
      ByteBuffer dst,
      int type,
      long ts)
    {
      this();
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      this.dst = org.apache.thrift.TBaseHelper.copyBinary(dst);
      this.type = type;
      setTypeIsSet(true);
      this.ts = ts;
      setTsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read_args(read_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = org.apache.thrift.TBaseHelper.copyBinary(other.src);
      }
      if (other.isSetDst()) {
        this.dst = org.apache.thrift.TBaseHelper.copyBinary(other.dst);
      }
      this.type = other.type;
      this.ts = other.ts;
    }

    public read_args deepCopy() {
      return new read_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      this.dst = null;
      setTypeIsSet(false);
      this.type = 0;
      setTsIsSet(false);
      this.ts = 0;
    }

    public byte[] getSrc() {
      setSrc(org.apache.thrift.TBaseHelper.rightSize(src));
      return src == null ? null : src.array();
    }

    public ByteBuffer bufferForSrc() {
      return org.apache.thrift.TBaseHelper.copyBinary(src);
    }

    public read_args setSrc(byte[] src) {
      this.src = src == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(src, src.length));
      return this;
    }

    public read_args setSrc(ByteBuffer src) {
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public byte[] getDst() {
      setDst(org.apache.thrift.TBaseHelper.rightSize(dst));
      return dst == null ? null : dst.array();
    }

    public ByteBuffer bufferForDst() {
      return org.apache.thrift.TBaseHelper.copyBinary(dst);
    }

    public read_args setDst(byte[] dst) {
      this.dst = dst == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(dst, dst.length));
      return this;
    }

    public read_args setDst(ByteBuffer dst) {
      this.dst = org.apache.thrift.TBaseHelper.copyBinary(dst);
      return this;
    }

    public void unsetDst() {
      this.dst = null;
    }

    /** Returns true if field dst is set (has been assigned a value) and false otherwise */
    public boolean isSetDst() {
      return this.dst != null;
    }

    public void setDstIsSet(boolean value) {
      if (!value) {
        this.dst = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public read_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public long getTs() {
      return this.ts;
    }

    public read_args setTs(long ts) {
      this.ts = ts;
      setTsIsSet(true);
      return this;
    }

    public void unsetTs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TS_ISSET_ID);
    }

    /** Returns true if field ts is set (has been assigned a value) and false otherwise */
    public boolean isSetTs() {
      return EncodingUtils.testBit(__isset_bitfield, __TS_ISSET_ID);
    }

    public void setTsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((ByteBuffer)value);
        }
        break;

      case DST:
        if (value == null) {
          unsetDst();
        } else {
          setDst((ByteBuffer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case TS:
        if (value == null) {
          unsetTs();
        } else {
          setTs((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case DST:
        return getDst();

      case TYPE:
        return Integer.valueOf(getType());

      case TS:
        return Long.valueOf(getTs());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case DST:
        return isSetDst();
      case TYPE:
        return isSetType();
      case TS:
        return isSetTs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read_args)
        return this.equals((read_args)that);
      return false;
    }

    public boolean equals(read_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_dst = true && this.isSetDst();
      boolean that_present_dst = true && that.isSetDst();
      if (this_present_dst || that_present_dst) {
        if (!(this_present_dst && that_present_dst))
          return false;
        if (!this.dst.equals(that.dst))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_ts = true;
      boolean that_present_ts = true;
      if (this_present_ts || that_present_ts) {
        if (!(this_present_ts && that_present_ts))
          return false;
        if (this.ts != that.ts)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true && (isSetSrc());
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_dst = true && (isSetDst());
      list.add(present_dst);
      if (present_dst)
        list.add(dst);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_ts = true;
      list.add(present_ts);
      if (present_ts)
        list.add(ts);

      return list.hashCode();
    }

    @Override
    public int compareTo(read_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDst()).compareTo(other.isSetDst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dst, other.dst);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTs()).compareTo(other.isSetTs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ts, other.ts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.src, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dst:");
      if (this.dst == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.dst, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ts:");
      sb.append(this.ts);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read_argsStandardSchemeFactory implements SchemeFactory {
      public read_argsStandardScheme getScheme() {
        return new read_argsStandardScheme();
      }
    }

    private static class read_argsStandardScheme extends StandardScheme<read_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.src = iprot.readBinary();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dst = iprot.readBinary();
                struct.setDstIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ts = iprot.readI64();
                struct.setTsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          oprot.writeBinary(struct.src);
          oprot.writeFieldEnd();
        }
        if (struct.dst != null) {
          oprot.writeFieldBegin(DST_FIELD_DESC);
          oprot.writeBinary(struct.dst);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TS_FIELD_DESC);
        oprot.writeI64(struct.ts);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read_argsTupleSchemeFactory implements SchemeFactory {
      public read_argsTupleScheme getScheme() {
        return new read_argsTupleScheme();
      }
    }

    private static class read_argsTupleScheme extends TupleScheme<read_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetDst()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetTs()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSrc()) {
          oprot.writeBinary(struct.src);
        }
        if (struct.isSetDst()) {
          oprot.writeBinary(struct.dst);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetTs()) {
          oprot.writeI64(struct.ts);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.src = iprot.readBinary();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dst = iprot.readBinary();
          struct.setDstIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ts = iprot.readI64();
          struct.setTsIsSet(true);
        }
      }
    }

  }

  public static class read_result implements org.apache.thrift.TBase<read_result, read_result._Fields>, java.io.Serializable, Cloneable, Comparable<read_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField R_FIELD_DESC = new org.apache.thrift.protocol.TField("r", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read_resultTupleSchemeFactory());
    }

    public List<KeyValue> success; // required
    public RedirectException r; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      R((short)1, "r");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // R
            return R;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValue.class))));
      tmpMap.put(_Fields.R, new org.apache.thrift.meta_data.FieldMetaData("r", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read_result.class, metaDataMap);
    }

    public read_result() {
    }

    public read_result(
      List<KeyValue> success,
      RedirectException r)
    {
      this();
      this.success = success;
      this.r = r;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read_result(read_result other) {
      if (other.isSetSuccess()) {
        List<KeyValue> __this__success = new ArrayList<KeyValue>(other.success.size());
        for (KeyValue other_element : other.success) {
          __this__success.add(new KeyValue(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetR()) {
        this.r = new RedirectException(other.r);
      }
    }

    public read_result deepCopy() {
      return new read_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.r = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<KeyValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(KeyValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<KeyValue>();
      }
      this.success.add(elem);
    }

    public List<KeyValue> getSuccess() {
      return this.success;
    }

    public read_result setSuccess(List<KeyValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public RedirectException getR() {
      return this.r;
    }

    public read_result setR(RedirectException r) {
      this.r = r;
      return this;
    }

    public void unsetR() {
      this.r = null;
    }

    /** Returns true if field r is set (has been assigned a value) and false otherwise */
    public boolean isSetR() {
      return this.r != null;
    }

    public void setRIsSet(boolean value) {
      if (!value) {
        this.r = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<KeyValue>)value);
        }
        break;

      case R:
        if (value == null) {
          unsetR();
        } else {
          setR((RedirectException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case R:
        return getR();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case R:
        return isSetR();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read_result)
        return this.equals((read_result)that);
      return false;
    }

    public boolean equals(read_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_r = true && this.isSetR();
      boolean that_present_r = true && that.isSetR();
      if (this_present_r || that_present_r) {
        if (!(this_present_r && that_present_r))
          return false;
        if (!this.r.equals(that.r))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_r = true && (isSetR());
      list.add(present_r);
      if (present_r)
        list.add(r);

      return list.hashCode();
    }

    @Override
    public int compareTo(read_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetR()).compareTo(other.isSetR());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetR()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.r, other.r);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("r:");
      if (this.r == null) {
        sb.append("null");
      } else {
        sb.append(this.r);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read_resultStandardSchemeFactory implements SchemeFactory {
      public read_resultStandardScheme getScheme() {
        return new read_resultStandardScheme();
      }
    }

    private static class read_resultStandardScheme extends StandardScheme<read_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<KeyValue>(_list64.size);
                  KeyValue _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new KeyValue();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // R
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.r = new RedirectException();
                struct.r.read(iprot);
                struct.setRIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (KeyValue _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.r != null) {
          oprot.writeFieldBegin(R_FIELD_DESC);
          struct.r.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read_resultTupleSchemeFactory implements SchemeFactory {
      public read_resultTupleScheme getScheme() {
        return new read_resultTupleScheme();
      }
    }

    private static class read_resultTupleScheme extends TupleScheme<read_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetR()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (KeyValue _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
        if (struct.isSetR()) {
          struct.r.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<KeyValue>(_list69.size);
            KeyValue _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new KeyValue();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.r = new RedirectException();
          struct.r.read(iprot);
          struct.setRIsSet(true);
        }
      }
    }

  }

  public static class scan_args implements org.apache.thrift.TBase<scan_args, scan_args._Fields>, java.io.Serializable, Cloneable, Comparable<scan_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scan_args");

    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField BITMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("bitmap", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TS1_FIELD_DESC = new org.apache.thrift.protocol.TField("ts1", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField TS2_FIELD_DESC = new org.apache.thrift.protocol.TField("ts2", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scan_argsTupleSchemeFactory());
    }

    public ByteBuffer src; // required
    public int type; // required
    public ByteBuffer bitmap; // required
    public long ts1; // required
    public long ts2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC((short)1, "src"),
      TYPE((short)2, "type"),
      BITMAP((short)3, "bitmap"),
      TS1((short)4, "ts1"),
      TS2((short)5, "ts2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC
            return SRC;
          case 2: // TYPE
            return TYPE;
          case 3: // BITMAP
            return BITMAP;
          case 4: // TS1
            return TS1;
          case 5: // TS2
            return TS2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __TS1_ISSET_ID = 1;
    private static final int __TS2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BITMAP, new org.apache.thrift.meta_data.FieldMetaData("bitmap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.TS1, new org.apache.thrift.meta_data.FieldMetaData("ts1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TS2, new org.apache.thrift.meta_data.FieldMetaData("ts2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scan_args.class, metaDataMap);
    }

    public scan_args() {
    }

    public scan_args(
      ByteBuffer src,
      int type,
      ByteBuffer bitmap,
      long ts1,
      long ts2)
    {
      this();
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      this.type = type;
      setTypeIsSet(true);
      this.bitmap = org.apache.thrift.TBaseHelper.copyBinary(bitmap);
      this.ts1 = ts1;
      setTs1IsSet(true);
      this.ts2 = ts2;
      setTs2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scan_args(scan_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSrc()) {
        this.src = org.apache.thrift.TBaseHelper.copyBinary(other.src);
      }
      this.type = other.type;
      if (other.isSetBitmap()) {
        this.bitmap = org.apache.thrift.TBaseHelper.copyBinary(other.bitmap);
      }
      this.ts1 = other.ts1;
      this.ts2 = other.ts2;
    }

    public scan_args deepCopy() {
      return new scan_args(this);
    }

    @Override
    public void clear() {
      this.src = null;
      setTypeIsSet(false);
      this.type = 0;
      this.bitmap = null;
      setTs1IsSet(false);
      this.ts1 = 0;
      setTs2IsSet(false);
      this.ts2 = 0;
    }

    public byte[] getSrc() {
      setSrc(org.apache.thrift.TBaseHelper.rightSize(src));
      return src == null ? null : src.array();
    }

    public ByteBuffer bufferForSrc() {
      return org.apache.thrift.TBaseHelper.copyBinary(src);
    }

    public scan_args setSrc(byte[] src) {
      this.src = src == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(src, src.length));
      return this;
    }

    public scan_args setSrc(ByteBuffer src) {
      this.src = org.apache.thrift.TBaseHelper.copyBinary(src);
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public scan_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public byte[] getBitmap() {
      setBitmap(org.apache.thrift.TBaseHelper.rightSize(bitmap));
      return bitmap == null ? null : bitmap.array();
    }

    public ByteBuffer bufferForBitmap() {
      return org.apache.thrift.TBaseHelper.copyBinary(bitmap);
    }

    public scan_args setBitmap(byte[] bitmap) {
      this.bitmap = bitmap == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(bitmap, bitmap.length));
      return this;
    }

    public scan_args setBitmap(ByteBuffer bitmap) {
      this.bitmap = org.apache.thrift.TBaseHelper.copyBinary(bitmap);
      return this;
    }

    public void unsetBitmap() {
      this.bitmap = null;
    }

    /** Returns true if field bitmap is set (has been assigned a value) and false otherwise */
    public boolean isSetBitmap() {
      return this.bitmap != null;
    }

    public void setBitmapIsSet(boolean value) {
      if (!value) {
        this.bitmap = null;
      }
    }

    public long getTs1() {
      return this.ts1;
    }

    public scan_args setTs1(long ts1) {
      this.ts1 = ts1;
      setTs1IsSet(true);
      return this;
    }

    public void unsetTs1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TS1_ISSET_ID);
    }

    /** Returns true if field ts1 is set (has been assigned a value) and false otherwise */
    public boolean isSetTs1() {
      return EncodingUtils.testBit(__isset_bitfield, __TS1_ISSET_ID);
    }

    public void setTs1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TS1_ISSET_ID, value);
    }

    public long getTs2() {
      return this.ts2;
    }

    public scan_args setTs2(long ts2) {
      this.ts2 = ts2;
      setTs2IsSet(true);
      return this;
    }

    public void unsetTs2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TS2_ISSET_ID);
    }

    /** Returns true if field ts2 is set (has been assigned a value) and false otherwise */
    public boolean isSetTs2() {
      return EncodingUtils.testBit(__isset_bitfield, __TS2_ISSET_ID);
    }

    public void setTs2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TS2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRC:
        if (value == null) {
          unsetSrc();
        } else {
          setSrc((ByteBuffer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case BITMAP:
        if (value == null) {
          unsetBitmap();
        } else {
          setBitmap((ByteBuffer)value);
        }
        break;

      case TS1:
        if (value == null) {
          unsetTs1();
        } else {
          setTs1((Long)value);
        }
        break;

      case TS2:
        if (value == null) {
          unsetTs2();
        } else {
          setTs2((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC:
        return getSrc();

      case TYPE:
        return Integer.valueOf(getType());

      case BITMAP:
        return getBitmap();

      case TS1:
        return Long.valueOf(getTs1());

      case TS2:
        return Long.valueOf(getTs2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRC:
        return isSetSrc();
      case TYPE:
        return isSetType();
      case BITMAP:
        return isSetBitmap();
      case TS1:
        return isSetTs1();
      case TS2:
        return isSetTs2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scan_args)
        return this.equals((scan_args)that);
      return false;
    }

    public boolean equals(scan_args that) {
      if (that == null)
        return false;

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_bitmap = true && this.isSetBitmap();
      boolean that_present_bitmap = true && that.isSetBitmap();
      if (this_present_bitmap || that_present_bitmap) {
        if (!(this_present_bitmap && that_present_bitmap))
          return false;
        if (!this.bitmap.equals(that.bitmap))
          return false;
      }

      boolean this_present_ts1 = true;
      boolean that_present_ts1 = true;
      if (this_present_ts1 || that_present_ts1) {
        if (!(this_present_ts1 && that_present_ts1))
          return false;
        if (this.ts1 != that.ts1)
          return false;
      }

      boolean this_present_ts2 = true;
      boolean that_present_ts2 = true;
      if (this_present_ts2 || that_present_ts2) {
        if (!(this_present_ts2 && that_present_ts2))
          return false;
        if (this.ts2 != that.ts2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_src = true && (isSetSrc());
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_bitmap = true && (isSetBitmap());
      list.add(present_bitmap);
      if (present_bitmap)
        list.add(bitmap);

      boolean present_ts1 = true;
      list.add(present_ts1);
      if (present_ts1)
        list.add(ts1);

      boolean present_ts2 = true;
      list.add(present_ts2);
      if (present_ts2)
        list.add(ts2);

      return list.hashCode();
    }

    @Override
    public int compareTo(scan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBitmap()).compareTo(other.isSetBitmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBitmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bitmap, other.bitmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTs1()).compareTo(other.isSetTs1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTs1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ts1, other.ts1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTs2()).compareTo(other.isSetTs2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTs2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ts2, other.ts2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scan_args(");
      boolean first = true;

      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.src, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bitmap:");
      if (this.bitmap == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bitmap, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ts1:");
      sb.append(this.ts1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ts2:");
      sb.append(this.ts2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scan_argsStandardSchemeFactory implements SchemeFactory {
      public scan_argsStandardScheme getScheme() {
        return new scan_argsStandardScheme();
      }
    }

    private static class scan_argsStandardScheme extends StandardScheme<scan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.src = iprot.readBinary();
                struct.setSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BITMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bitmap = iprot.readBinary();
                struct.setBitmapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TS1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ts1 = iprot.readI64();
                struct.setTs1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TS2
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ts2 = iprot.readI64();
                struct.setTs2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          oprot.writeBinary(struct.src);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.bitmap != null) {
          oprot.writeFieldBegin(BITMAP_FIELD_DESC);
          oprot.writeBinary(struct.bitmap);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TS1_FIELD_DESC);
        oprot.writeI64(struct.ts1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TS2_FIELD_DESC);
        oprot.writeI64(struct.ts2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scan_argsTupleSchemeFactory implements SchemeFactory {
      public scan_argsTupleScheme getScheme() {
        return new scan_argsTupleScheme();
      }
    }

    private static class scan_argsTupleScheme extends TupleScheme<scan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrc()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetBitmap()) {
          optionals.set(2);
        }
        if (struct.isSetTs1()) {
          optionals.set(3);
        }
        if (struct.isSetTs2()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSrc()) {
          oprot.writeBinary(struct.src);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetBitmap()) {
          oprot.writeBinary(struct.bitmap);
        }
        if (struct.isSetTs1()) {
          oprot.writeI64(struct.ts1);
        }
        if (struct.isSetTs2()) {
          oprot.writeI64(struct.ts2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.src = iprot.readBinary();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bitmap = iprot.readBinary();
          struct.setBitmapIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ts1 = iprot.readI64();
          struct.setTs1IsSet(true);
        }
        if (incoming.get(4)) {
          struct.ts2 = iprot.readI64();
          struct.setTs2IsSet(true);
        }
      }
    }

  }

  public static class scan_result implements org.apache.thrift.TBase<scan_result, scan_result._Fields>, java.io.Serializable, Cloneable, Comparable<scan_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField R_FIELD_DESC = new org.apache.thrift.protocol.TField("r", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scan_resultTupleSchemeFactory());
    }

    public List<KeyValue> success; // required
    public RedirectException r; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      R((short)1, "r");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // R
            return R;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValue.class))));
      tmpMap.put(_Fields.R, new org.apache.thrift.meta_data.FieldMetaData("r", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scan_result.class, metaDataMap);
    }

    public scan_result() {
    }

    public scan_result(
      List<KeyValue> success,
      RedirectException r)
    {
      this();
      this.success = success;
      this.r = r;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scan_result(scan_result other) {
      if (other.isSetSuccess()) {
        List<KeyValue> __this__success = new ArrayList<KeyValue>(other.success.size());
        for (KeyValue other_element : other.success) {
          __this__success.add(new KeyValue(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetR()) {
        this.r = new RedirectException(other.r);
      }
    }

    public scan_result deepCopy() {
      return new scan_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.r = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<KeyValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(KeyValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<KeyValue>();
      }
      this.success.add(elem);
    }

    public List<KeyValue> getSuccess() {
      return this.success;
    }

    public scan_result setSuccess(List<KeyValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public RedirectException getR() {
      return this.r;
    }

    public scan_result setR(RedirectException r) {
      this.r = r;
      return this;
    }

    public void unsetR() {
      this.r = null;
    }

    /** Returns true if field r is set (has been assigned a value) and false otherwise */
    public boolean isSetR() {
      return this.r != null;
    }

    public void setRIsSet(boolean value) {
      if (!value) {
        this.r = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<KeyValue>)value);
        }
        break;

      case R:
        if (value == null) {
          unsetR();
        } else {
          setR((RedirectException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case R:
        return getR();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case R:
        return isSetR();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scan_result)
        return this.equals((scan_result)that);
      return false;
    }

    public boolean equals(scan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_r = true && this.isSetR();
      boolean that_present_r = true && that.isSetR();
      if (this_present_r || that_present_r) {
        if (!(this_present_r && that_present_r))
          return false;
        if (!this.r.equals(that.r))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_r = true && (isSetR());
      list.add(present_r);
      if (present_r)
        list.add(r);

      return list.hashCode();
    }

    @Override
    public int compareTo(scan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetR()).compareTo(other.isSetR());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetR()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.r, other.r);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scan_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("r:");
      if (this.r == null) {
        sb.append("null");
      } else {
        sb.append(this.r);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scan_resultStandardSchemeFactory implements SchemeFactory {
      public scan_resultStandardScheme getScheme() {
        return new scan_resultStandardScheme();
      }
    }

    private static class scan_resultStandardScheme extends StandardScheme<scan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<KeyValue>(_list72.size);
                  KeyValue _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new KeyValue();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // R
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.r = new RedirectException();
                struct.r.read(iprot);
                struct.setRIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (KeyValue _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.r != null) {
          oprot.writeFieldBegin(R_FIELD_DESC);
          struct.r.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scan_resultTupleSchemeFactory implements SchemeFactory {
      public scan_resultTupleScheme getScheme() {
        return new scan_resultTupleScheme();
      }
    }

    private static class scan_resultTupleScheme extends TupleScheme<scan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetR()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (KeyValue _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
        if (struct.isSetR()) {
          struct.r.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<KeyValue>(_list77.size);
            KeyValue _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new KeyValue();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.r = new RedirectException();
          struct.r.read(iprot);
          struct.setRIsSet(true);
        }
      }
    }

  }

  public static class echo_args implements org.apache.thrift.TBase<echo_args, echo_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo_args");

    private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("payload", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echo_argsTupleSchemeFactory());
    }

    public int s; // required
    public ByteBuffer payload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      S((short)1, "s"),
      PAYLOAD((short)2, "payload");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // S
            return S;
          case 2: // PAYLOAD
            return PAYLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __S_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("payload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo_args.class, metaDataMap);
    }

    public echo_args() {
    }

    public echo_args(
      int s,
      ByteBuffer payload)
    {
      this();
      this.s = s;
      setSIsSet(true);
      this.payload = org.apache.thrift.TBaseHelper.copyBinary(payload);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echo_args(echo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.s = other.s;
      if (other.isSetPayload()) {
        this.payload = org.apache.thrift.TBaseHelper.copyBinary(other.payload);
      }
    }

    public echo_args deepCopy() {
      return new echo_args(this);
    }

    @Override
    public void clear() {
      setSIsSet(false);
      this.s = 0;
      this.payload = null;
    }

    public int getS() {
      return this.s;
    }

    public echo_args setS(int s) {
      this.s = s;
      setSIsSet(true);
      return this;
    }

    public void unsetS() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __S_ISSET_ID);
    }

    /** Returns true if field s is set (has been assigned a value) and false otherwise */
    public boolean isSetS() {
      return EncodingUtils.testBit(__isset_bitfield, __S_ISSET_ID);
    }

    public void setSIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __S_ISSET_ID, value);
    }

    public byte[] getPayload() {
      setPayload(org.apache.thrift.TBaseHelper.rightSize(payload));
      return payload == null ? null : payload.array();
    }

    public ByteBuffer bufferForPayload() {
      return org.apache.thrift.TBaseHelper.copyBinary(payload);
    }

    public echo_args setPayload(byte[] payload) {
      this.payload = payload == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(payload, payload.length));
      return this;
    }

    public echo_args setPayload(ByteBuffer payload) {
      this.payload = org.apache.thrift.TBaseHelper.copyBinary(payload);
      return this;
    }

    public void unsetPayload() {
      this.payload = null;
    }

    /** Returns true if field payload is set (has been assigned a value) and false otherwise */
    public boolean isSetPayload() {
      return this.payload != null;
    }

    public void setPayloadIsSet(boolean value) {
      if (!value) {
        this.payload = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case S:
        if (value == null) {
          unsetS();
        } else {
          setS((Integer)value);
        }
        break;

      case PAYLOAD:
        if (value == null) {
          unsetPayload();
        } else {
          setPayload((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case S:
        return Integer.valueOf(getS());

      case PAYLOAD:
        return getPayload();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case S:
        return isSetS();
      case PAYLOAD:
        return isSetPayload();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echo_args)
        return this.equals((echo_args)that);
      return false;
    }

    public boolean equals(echo_args that) {
      if (that == null)
        return false;

      boolean this_present_s = true;
      boolean that_present_s = true;
      if (this_present_s || that_present_s) {
        if (!(this_present_s && that_present_s))
          return false;
        if (this.s != that.s)
          return false;
      }

      boolean this_present_payload = true && this.isSetPayload();
      boolean that_present_payload = true && that.isSetPayload();
      if (this_present_payload || that_present_payload) {
        if (!(this_present_payload && that_present_payload))
          return false;
        if (!this.payload.equals(that.payload))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_s = true;
      list.add(present_s);
      if (present_s)
        list.add(s);

      boolean present_payload = true && (isSetPayload());
      list.add(present_payload);
      if (present_payload)
        list.add(payload);

      return list.hashCode();
    }

    @Override
    public int compareTo(echo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetS()).compareTo(other.isSetS());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayload()).compareTo(other.isSetPayload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payload, other.payload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echo_args(");
      boolean first = true;

      sb.append("s:");
      sb.append(this.s);
      first = false;
      if (!first) sb.append(", ");
      sb.append("payload:");
      if (this.payload == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.payload, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echo_argsStandardSchemeFactory implements SchemeFactory {
      public echo_argsStandardScheme getScheme() {
        return new echo_argsStandardScheme();
      }
    }

    private static class echo_argsStandardScheme extends StandardScheme<echo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // S
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.s = iprot.readI32();
                struct.setSIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAYLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.payload = iprot.readBinary();
                struct.setPayloadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(S_FIELD_DESC);
        oprot.writeI32(struct.s);
        oprot.writeFieldEnd();
        if (struct.payload != null) {
          oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
          oprot.writeBinary(struct.payload);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echo_argsTupleSchemeFactory implements SchemeFactory {
      public echo_argsTupleScheme getScheme() {
        return new echo_argsTupleScheme();
      }
    }

    private static class echo_argsTupleScheme extends TupleScheme<echo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetS()) {
          optionals.set(0);
        }
        if (struct.isSetPayload()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetS()) {
          oprot.writeI32(struct.s);
        }
        if (struct.isSetPayload()) {
          oprot.writeBinary(struct.payload);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.s = iprot.readI32();
          struct.setSIsSet(true);
        }
        if (incoming.get(1)) {
          struct.payload = iprot.readBinary();
          struct.setPayloadIsSet(true);
        }
      }
    }

  }

  public static class echo_result implements org.apache.thrift.TBase<echo_result, echo_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo_result.class, metaDataMap);
    }

    public echo_result() {
    }

    public echo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echo_result(echo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public echo_result deepCopy() {
      return new echo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public echo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echo_result)
        return this.equals((echo_result)that);
      return false;
    }

    public boolean equals(echo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(echo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echo_resultStandardSchemeFactory implements SchemeFactory {
      public echo_resultStandardScheme getScheme() {
        return new echo_resultStandardScheme();
      }
    }

    private static class echo_resultStandardScheme extends StandardScheme<echo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echo_resultTupleSchemeFactory implements SchemeFactory {
      public echo_resultTupleScheme getScheme() {
        return new echo_resultTupleScheme();
      }
    }

    private static class echo_resultTupleScheme extends TupleScheme<echo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class syncTravel_args implements org.apache.thrift.TBase<syncTravel_args, syncTravel_args._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravel_args");

    private static final org.apache.thrift.protocol.TField TC_FIELD_DESC = new org.apache.thrift.protocol.TField("tc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravel_argsTupleSchemeFactory());
    }

    public TravelCommand tc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TC((short)1, "tc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TC
            return TC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TC, new org.apache.thrift.meta_data.FieldMetaData("tc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TravelCommand.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravel_args.class, metaDataMap);
    }

    public syncTravel_args() {
    }

    public syncTravel_args(
      TravelCommand tc)
    {
      this();
      this.tc = tc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravel_args(syncTravel_args other) {
      if (other.isSetTc()) {
        this.tc = new TravelCommand(other.tc);
      }
    }

    public syncTravel_args deepCopy() {
      return new syncTravel_args(this);
    }

    @Override
    public void clear() {
      this.tc = null;
    }

    public TravelCommand getTc() {
      return this.tc;
    }

    public syncTravel_args setTc(TravelCommand tc) {
      this.tc = tc;
      return this;
    }

    public void unsetTc() {
      this.tc = null;
    }

    /** Returns true if field tc is set (has been assigned a value) and false otherwise */
    public boolean isSetTc() {
      return this.tc != null;
    }

    public void setTcIsSet(boolean value) {
      if (!value) {
        this.tc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TC:
        if (value == null) {
          unsetTc();
        } else {
          setTc((TravelCommand)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TC:
        return getTc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TC:
        return isSetTc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravel_args)
        return this.equals((syncTravel_args)that);
      return false;
    }

    public boolean equals(syncTravel_args that) {
      if (that == null)
        return false;

      boolean this_present_tc = true && this.isSetTc();
      boolean that_present_tc = true && that.isSetTc();
      if (this_present_tc || that_present_tc) {
        if (!(this_present_tc && that_present_tc))
          return false;
        if (!this.tc.equals(that.tc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tc = true && (isSetTc());
      list.add(present_tc);
      if (present_tc)
        list.add(tc);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTc()).compareTo(other.isSetTc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tc, other.tc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravel_args(");
      boolean first = true;

      sb.append("tc:");
      if (this.tc == null) {
        sb.append("null");
      } else {
        sb.append(this.tc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tc != null) {
        tc.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravel_argsStandardSchemeFactory implements SchemeFactory {
      public syncTravel_argsStandardScheme getScheme() {
        return new syncTravel_argsStandardScheme();
      }
    }

    private static class syncTravel_argsStandardScheme extends StandardScheme<syncTravel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tc = new TravelCommand();
                struct.tc.read(iprot);
                struct.setTcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tc != null) {
          oprot.writeFieldBegin(TC_FIELD_DESC);
          struct.tc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravel_argsTupleSchemeFactory implements SchemeFactory {
      public syncTravel_argsTupleScheme getScheme() {
        return new syncTravel_argsTupleScheme();
      }
    }

    private static class syncTravel_argsTupleScheme extends TupleScheme<syncTravel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTc()) {
          struct.tc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tc = new TravelCommand();
          struct.tc.read(iprot);
          struct.setTcIsSet(true);
        }
      }
    }

  }

  public static class syncTravel_result implements org.apache.thrift.TBase<syncTravel_result, syncTravel_result._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravel_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravel_result.class, metaDataMap);
    }

    public syncTravel_result() {
    }

    public syncTravel_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravel_result(syncTravel_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public syncTravel_result deepCopy() {
      return new syncTravel_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public syncTravel_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravel_result)
        return this.equals((syncTravel_result)that);
      return false;
    }

    public boolean equals(syncTravel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravel_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravel_resultStandardSchemeFactory implements SchemeFactory {
      public syncTravel_resultStandardScheme getScheme() {
        return new syncTravel_resultStandardScheme();
      }
    }

    private static class syncTravel_resultStandardScheme extends StandardScheme<syncTravel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravel_resultTupleSchemeFactory implements SchemeFactory {
      public syncTravel_resultTupleScheme getScheme() {
        return new syncTravel_resultTupleScheme();
      }
    }

    private static class syncTravel_resultTupleScheme extends TupleScheme<syncTravel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class syncTravelMaster_args implements org.apache.thrift.TBase<syncTravelMaster_args, syncTravelMaster_args._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravelMaster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravelMaster_args");

    private static final org.apache.thrift.protocol.TField TC_FIELD_DESC = new org.apache.thrift.protocol.TField("tc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravelMaster_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravelMaster_argsTupleSchemeFactory());
    }

    public TravelCommand tc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TC((short)1, "tc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TC
            return TC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TC, new org.apache.thrift.meta_data.FieldMetaData("tc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TravelCommand.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravelMaster_args.class, metaDataMap);
    }

    public syncTravelMaster_args() {
    }

    public syncTravelMaster_args(
      TravelCommand tc)
    {
      this();
      this.tc = tc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravelMaster_args(syncTravelMaster_args other) {
      if (other.isSetTc()) {
        this.tc = new TravelCommand(other.tc);
      }
    }

    public syncTravelMaster_args deepCopy() {
      return new syncTravelMaster_args(this);
    }

    @Override
    public void clear() {
      this.tc = null;
    }

    public TravelCommand getTc() {
      return this.tc;
    }

    public syncTravelMaster_args setTc(TravelCommand tc) {
      this.tc = tc;
      return this;
    }

    public void unsetTc() {
      this.tc = null;
    }

    /** Returns true if field tc is set (has been assigned a value) and false otherwise */
    public boolean isSetTc() {
      return this.tc != null;
    }

    public void setTcIsSet(boolean value) {
      if (!value) {
        this.tc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TC:
        if (value == null) {
          unsetTc();
        } else {
          setTc((TravelCommand)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TC:
        return getTc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TC:
        return isSetTc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravelMaster_args)
        return this.equals((syncTravelMaster_args)that);
      return false;
    }

    public boolean equals(syncTravelMaster_args that) {
      if (that == null)
        return false;

      boolean this_present_tc = true && this.isSetTc();
      boolean that_present_tc = true && that.isSetTc();
      if (this_present_tc || that_present_tc) {
        if (!(this_present_tc && that_present_tc))
          return false;
        if (!this.tc.equals(that.tc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tc = true && (isSetTc());
      list.add(present_tc);
      if (present_tc)
        list.add(tc);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravelMaster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTc()).compareTo(other.isSetTc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tc, other.tc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravelMaster_args(");
      boolean first = true;

      sb.append("tc:");
      if (this.tc == null) {
        sb.append("null");
      } else {
        sb.append(this.tc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tc != null) {
        tc.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravelMaster_argsStandardSchemeFactory implements SchemeFactory {
      public syncTravelMaster_argsStandardScheme getScheme() {
        return new syncTravelMaster_argsStandardScheme();
      }
    }

    private static class syncTravelMaster_argsStandardScheme extends StandardScheme<syncTravelMaster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravelMaster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tc = new TravelCommand();
                struct.tc.read(iprot);
                struct.setTcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravelMaster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tc != null) {
          oprot.writeFieldBegin(TC_FIELD_DESC);
          struct.tc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravelMaster_argsTupleSchemeFactory implements SchemeFactory {
      public syncTravelMaster_argsTupleScheme getScheme() {
        return new syncTravelMaster_argsTupleScheme();
      }
    }

    private static class syncTravelMaster_argsTupleScheme extends TupleScheme<syncTravelMaster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravelMaster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTc()) {
          struct.tc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravelMaster_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tc = new TravelCommand();
          struct.tc.read(iprot);
          struct.setTcIsSet(true);
        }
      }
    }

  }

  public static class syncTravelMaster_result implements org.apache.thrift.TBase<syncTravelMaster_result, syncTravelMaster_result._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravelMaster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravelMaster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravelMaster_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravelMaster_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravelMaster_result.class, metaDataMap);
    }

    public syncTravelMaster_result() {
    }

    public syncTravelMaster_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravelMaster_result(syncTravelMaster_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public syncTravelMaster_result deepCopy() {
      return new syncTravelMaster_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public syncTravelMaster_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravelMaster_result)
        return this.equals((syncTravelMaster_result)that);
      return false;
    }

    public boolean equals(syncTravelMaster_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravelMaster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravelMaster_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravelMaster_resultStandardSchemeFactory implements SchemeFactory {
      public syncTravelMaster_resultStandardScheme getScheme() {
        return new syncTravelMaster_resultStandardScheme();
      }
    }

    private static class syncTravelMaster_resultStandardScheme extends StandardScheme<syncTravelMaster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravelMaster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravelMaster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravelMaster_resultTupleSchemeFactory implements SchemeFactory {
      public syncTravelMaster_resultTupleScheme getScheme() {
        return new syncTravelMaster_resultTupleScheme();
      }
    }

    private static class syncTravelMaster_resultTupleScheme extends TupleScheme<syncTravelMaster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravelMaster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravelMaster_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class syncTravelRtn_args implements org.apache.thrift.TBase<syncTravelRtn_args, syncTravelRtn_args._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravelRtn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravelRtn_args");

    private static final org.apache.thrift.protocol.TField TC_FIELD_DESC = new org.apache.thrift.protocol.TField("tc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravelRtn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravelRtn_argsTupleSchemeFactory());
    }

    public TravelCommand tc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TC((short)1, "tc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TC
            return TC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TC, new org.apache.thrift.meta_data.FieldMetaData("tc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TravelCommand.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravelRtn_args.class, metaDataMap);
    }

    public syncTravelRtn_args() {
    }

    public syncTravelRtn_args(
      TravelCommand tc)
    {
      this();
      this.tc = tc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravelRtn_args(syncTravelRtn_args other) {
      if (other.isSetTc()) {
        this.tc = new TravelCommand(other.tc);
      }
    }

    public syncTravelRtn_args deepCopy() {
      return new syncTravelRtn_args(this);
    }

    @Override
    public void clear() {
      this.tc = null;
    }

    public TravelCommand getTc() {
      return this.tc;
    }

    public syncTravelRtn_args setTc(TravelCommand tc) {
      this.tc = tc;
      return this;
    }

    public void unsetTc() {
      this.tc = null;
    }

    /** Returns true if field tc is set (has been assigned a value) and false otherwise */
    public boolean isSetTc() {
      return this.tc != null;
    }

    public void setTcIsSet(boolean value) {
      if (!value) {
        this.tc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TC:
        if (value == null) {
          unsetTc();
        } else {
          setTc((TravelCommand)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TC:
        return getTc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TC:
        return isSetTc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravelRtn_args)
        return this.equals((syncTravelRtn_args)that);
      return false;
    }

    public boolean equals(syncTravelRtn_args that) {
      if (that == null)
        return false;

      boolean this_present_tc = true && this.isSetTc();
      boolean that_present_tc = true && that.isSetTc();
      if (this_present_tc || that_present_tc) {
        if (!(this_present_tc && that_present_tc))
          return false;
        if (!this.tc.equals(that.tc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tc = true && (isSetTc());
      list.add(present_tc);
      if (present_tc)
        list.add(tc);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravelRtn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTc()).compareTo(other.isSetTc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tc, other.tc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravelRtn_args(");
      boolean first = true;

      sb.append("tc:");
      if (this.tc == null) {
        sb.append("null");
      } else {
        sb.append(this.tc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tc != null) {
        tc.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravelRtn_argsStandardSchemeFactory implements SchemeFactory {
      public syncTravelRtn_argsStandardScheme getScheme() {
        return new syncTravelRtn_argsStandardScheme();
      }
    }

    private static class syncTravelRtn_argsStandardScheme extends StandardScheme<syncTravelRtn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravelRtn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tc = new TravelCommand();
                struct.tc.read(iprot);
                struct.setTcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravelRtn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tc != null) {
          oprot.writeFieldBegin(TC_FIELD_DESC);
          struct.tc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravelRtn_argsTupleSchemeFactory implements SchemeFactory {
      public syncTravelRtn_argsTupleScheme getScheme() {
        return new syncTravelRtn_argsTupleScheme();
      }
    }

    private static class syncTravelRtn_argsTupleScheme extends TupleScheme<syncTravelRtn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravelRtn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTc()) {
          struct.tc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravelRtn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tc = new TravelCommand();
          struct.tc.read(iprot);
          struct.setTcIsSet(true);
        }
      }
    }

  }

  public static class syncTravelRtn_result implements org.apache.thrift.TBase<syncTravelRtn_result, syncTravelRtn_result._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravelRtn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravelRtn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravelRtn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravelRtn_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravelRtn_result.class, metaDataMap);
    }

    public syncTravelRtn_result() {
    }

    public syncTravelRtn_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravelRtn_result(syncTravelRtn_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public syncTravelRtn_result deepCopy() {
      return new syncTravelRtn_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public syncTravelRtn_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravelRtn_result)
        return this.equals((syncTravelRtn_result)that);
      return false;
    }

    public boolean equals(syncTravelRtn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravelRtn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravelRtn_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravelRtn_resultStandardSchemeFactory implements SchemeFactory {
      public syncTravelRtn_resultStandardScheme getScheme() {
        return new syncTravelRtn_resultStandardScheme();
      }
    }

    private static class syncTravelRtn_resultStandardScheme extends StandardScheme<syncTravelRtn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravelRtn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravelRtn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravelRtn_resultTupleSchemeFactory implements SchemeFactory {
      public syncTravelRtn_resultTupleScheme getScheme() {
        return new syncTravelRtn_resultTupleScheme();
      }
    }

    private static class syncTravelRtn_resultTupleScheme extends TupleScheme<syncTravelRtn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravelRtn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravelRtn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class syncTravelStart_args implements org.apache.thrift.TBase<syncTravelStart_args, syncTravelStart_args._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravelStart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravelStart_args");

    private static final org.apache.thrift.protocol.TField TC_FIELD_DESC = new org.apache.thrift.protocol.TField("tc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravelStart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravelStart_argsTupleSchemeFactory());
    }

    public TravelCommand tc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TC((short)1, "tc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TC
            return TC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TC, new org.apache.thrift.meta_data.FieldMetaData("tc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TravelCommand.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravelStart_args.class, metaDataMap);
    }

    public syncTravelStart_args() {
    }

    public syncTravelStart_args(
      TravelCommand tc)
    {
      this();
      this.tc = tc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravelStart_args(syncTravelStart_args other) {
      if (other.isSetTc()) {
        this.tc = new TravelCommand(other.tc);
      }
    }

    public syncTravelStart_args deepCopy() {
      return new syncTravelStart_args(this);
    }

    @Override
    public void clear() {
      this.tc = null;
    }

    public TravelCommand getTc() {
      return this.tc;
    }

    public syncTravelStart_args setTc(TravelCommand tc) {
      this.tc = tc;
      return this;
    }

    public void unsetTc() {
      this.tc = null;
    }

    /** Returns true if field tc is set (has been assigned a value) and false otherwise */
    public boolean isSetTc() {
      return this.tc != null;
    }

    public void setTcIsSet(boolean value) {
      if (!value) {
        this.tc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TC:
        if (value == null) {
          unsetTc();
        } else {
          setTc((TravelCommand)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TC:
        return getTc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TC:
        return isSetTc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravelStart_args)
        return this.equals((syncTravelStart_args)that);
      return false;
    }

    public boolean equals(syncTravelStart_args that) {
      if (that == null)
        return false;

      boolean this_present_tc = true && this.isSetTc();
      boolean that_present_tc = true && that.isSetTc();
      if (this_present_tc || that_present_tc) {
        if (!(this_present_tc && that_present_tc))
          return false;
        if (!this.tc.equals(that.tc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tc = true && (isSetTc());
      list.add(present_tc);
      if (present_tc)
        list.add(tc);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravelStart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTc()).compareTo(other.isSetTc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tc, other.tc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravelStart_args(");
      boolean first = true;

      sb.append("tc:");
      if (this.tc == null) {
        sb.append("null");
      } else {
        sb.append(this.tc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tc != null) {
        tc.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravelStart_argsStandardSchemeFactory implements SchemeFactory {
      public syncTravelStart_argsStandardScheme getScheme() {
        return new syncTravelStart_argsStandardScheme();
      }
    }

    private static class syncTravelStart_argsStandardScheme extends StandardScheme<syncTravelStart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravelStart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tc = new TravelCommand();
                struct.tc.read(iprot);
                struct.setTcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravelStart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tc != null) {
          oprot.writeFieldBegin(TC_FIELD_DESC);
          struct.tc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravelStart_argsTupleSchemeFactory implements SchemeFactory {
      public syncTravelStart_argsTupleScheme getScheme() {
        return new syncTravelStart_argsTupleScheme();
      }
    }

    private static class syncTravelStart_argsTupleScheme extends TupleScheme<syncTravelStart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravelStart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTc()) {
          struct.tc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravelStart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tc = new TravelCommand();
          struct.tc.read(iprot);
          struct.setTcIsSet(true);
        }
      }
    }

  }

  public static class syncTravelStart_result implements org.apache.thrift.TBase<syncTravelStart_result, syncTravelStart_result._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravelStart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravelStart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravelStart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravelStart_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravelStart_result.class, metaDataMap);
    }

    public syncTravelStart_result() {
    }

    public syncTravelStart_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravelStart_result(syncTravelStart_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public syncTravelStart_result deepCopy() {
      return new syncTravelStart_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public syncTravelStart_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravelStart_result)
        return this.equals((syncTravelStart_result)that);
      return false;
    }

    public boolean equals(syncTravelStart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravelStart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravelStart_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravelStart_resultStandardSchemeFactory implements SchemeFactory {
      public syncTravelStart_resultStandardScheme getScheme() {
        return new syncTravelStart_resultStandardScheme();
      }
    }

    private static class syncTravelStart_resultStandardScheme extends StandardScheme<syncTravelStart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravelStart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravelStart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravelStart_resultTupleSchemeFactory implements SchemeFactory {
      public syncTravelStart_resultTupleScheme getScheme() {
        return new syncTravelStart_resultTupleScheme();
      }
    }

    private static class syncTravelStart_resultTupleScheme extends TupleScheme<syncTravelStart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravelStart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravelStart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class syncTravelExtend_args implements org.apache.thrift.TBase<syncTravelExtend_args, syncTravelExtend_args._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravelExtend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravelExtend_args");

    private static final org.apache.thrift.protocol.TField TC_FIELD_DESC = new org.apache.thrift.protocol.TField("tc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravelExtend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravelExtend_argsTupleSchemeFactory());
    }

    public TravelCommand tc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TC((short)1, "tc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TC
            return TC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TC, new org.apache.thrift.meta_data.FieldMetaData("tc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TravelCommand.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravelExtend_args.class, metaDataMap);
    }

    public syncTravelExtend_args() {
    }

    public syncTravelExtend_args(
      TravelCommand tc)
    {
      this();
      this.tc = tc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravelExtend_args(syncTravelExtend_args other) {
      if (other.isSetTc()) {
        this.tc = new TravelCommand(other.tc);
      }
    }

    public syncTravelExtend_args deepCopy() {
      return new syncTravelExtend_args(this);
    }

    @Override
    public void clear() {
      this.tc = null;
    }

    public TravelCommand getTc() {
      return this.tc;
    }

    public syncTravelExtend_args setTc(TravelCommand tc) {
      this.tc = tc;
      return this;
    }

    public void unsetTc() {
      this.tc = null;
    }

    /** Returns true if field tc is set (has been assigned a value) and false otherwise */
    public boolean isSetTc() {
      return this.tc != null;
    }

    public void setTcIsSet(boolean value) {
      if (!value) {
        this.tc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TC:
        if (value == null) {
          unsetTc();
        } else {
          setTc((TravelCommand)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TC:
        return getTc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TC:
        return isSetTc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravelExtend_args)
        return this.equals((syncTravelExtend_args)that);
      return false;
    }

    public boolean equals(syncTravelExtend_args that) {
      if (that == null)
        return false;

      boolean this_present_tc = true && this.isSetTc();
      boolean that_present_tc = true && that.isSetTc();
      if (this_present_tc || that_present_tc) {
        if (!(this_present_tc && that_present_tc))
          return false;
        if (!this.tc.equals(that.tc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tc = true && (isSetTc());
      list.add(present_tc);
      if (present_tc)
        list.add(tc);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravelExtend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTc()).compareTo(other.isSetTc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tc, other.tc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravelExtend_args(");
      boolean first = true;

      sb.append("tc:");
      if (this.tc == null) {
        sb.append("null");
      } else {
        sb.append(this.tc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tc != null) {
        tc.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravelExtend_argsStandardSchemeFactory implements SchemeFactory {
      public syncTravelExtend_argsStandardScheme getScheme() {
        return new syncTravelExtend_argsStandardScheme();
      }
    }

    private static class syncTravelExtend_argsStandardScheme extends StandardScheme<syncTravelExtend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravelExtend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tc = new TravelCommand();
                struct.tc.read(iprot);
                struct.setTcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravelExtend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tc != null) {
          oprot.writeFieldBegin(TC_FIELD_DESC);
          struct.tc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravelExtend_argsTupleSchemeFactory implements SchemeFactory {
      public syncTravelExtend_argsTupleScheme getScheme() {
        return new syncTravelExtend_argsTupleScheme();
      }
    }

    private static class syncTravelExtend_argsTupleScheme extends TupleScheme<syncTravelExtend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravelExtend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTc()) {
          struct.tc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravelExtend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tc = new TravelCommand();
          struct.tc.read(iprot);
          struct.setTcIsSet(true);
        }
      }
    }

  }

  public static class syncTravelExtend_result implements org.apache.thrift.TBase<syncTravelExtend_result, syncTravelExtend_result._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravelExtend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravelExtend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravelExtend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravelExtend_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravelExtend_result.class, metaDataMap);
    }

    public syncTravelExtend_result() {
    }

    public syncTravelExtend_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravelExtend_result(syncTravelExtend_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public syncTravelExtend_result deepCopy() {
      return new syncTravelExtend_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public syncTravelExtend_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravelExtend_result)
        return this.equals((syncTravelExtend_result)that);
      return false;
    }

    public boolean equals(syncTravelExtend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravelExtend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravelExtend_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravelExtend_resultStandardSchemeFactory implements SchemeFactory {
      public syncTravelExtend_resultStandardScheme getScheme() {
        return new syncTravelExtend_resultStandardScheme();
      }
    }

    private static class syncTravelExtend_resultStandardScheme extends StandardScheme<syncTravelExtend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravelExtend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravelExtend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravelExtend_resultTupleSchemeFactory implements SchemeFactory {
      public syncTravelExtend_resultTupleScheme getScheme() {
        return new syncTravelExtend_resultTupleScheme();
      }
    }

    private static class syncTravelExtend_resultTupleScheme extends TupleScheme<syncTravelExtend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravelExtend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravelExtend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class syncTravelFinish_args implements org.apache.thrift.TBase<syncTravelFinish_args, syncTravelFinish_args._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravelFinish_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravelFinish_args");

    private static final org.apache.thrift.protocol.TField TC_FIELD_DESC = new org.apache.thrift.protocol.TField("tc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravelFinish_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravelFinish_argsTupleSchemeFactory());
    }

    public TravelCommand tc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TC((short)1, "tc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TC
            return TC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TC, new org.apache.thrift.meta_data.FieldMetaData("tc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TravelCommand.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravelFinish_args.class, metaDataMap);
    }

    public syncTravelFinish_args() {
    }

    public syncTravelFinish_args(
      TravelCommand tc)
    {
      this();
      this.tc = tc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravelFinish_args(syncTravelFinish_args other) {
      if (other.isSetTc()) {
        this.tc = new TravelCommand(other.tc);
      }
    }

    public syncTravelFinish_args deepCopy() {
      return new syncTravelFinish_args(this);
    }

    @Override
    public void clear() {
      this.tc = null;
    }

    public TravelCommand getTc() {
      return this.tc;
    }

    public syncTravelFinish_args setTc(TravelCommand tc) {
      this.tc = tc;
      return this;
    }

    public void unsetTc() {
      this.tc = null;
    }

    /** Returns true if field tc is set (has been assigned a value) and false otherwise */
    public boolean isSetTc() {
      return this.tc != null;
    }

    public void setTcIsSet(boolean value) {
      if (!value) {
        this.tc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TC:
        if (value == null) {
          unsetTc();
        } else {
          setTc((TravelCommand)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TC:
        return getTc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TC:
        return isSetTc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravelFinish_args)
        return this.equals((syncTravelFinish_args)that);
      return false;
    }

    public boolean equals(syncTravelFinish_args that) {
      if (that == null)
        return false;

      boolean this_present_tc = true && this.isSetTc();
      boolean that_present_tc = true && that.isSetTc();
      if (this_present_tc || that_present_tc) {
        if (!(this_present_tc && that_present_tc))
          return false;
        if (!this.tc.equals(that.tc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tc = true && (isSetTc());
      list.add(present_tc);
      if (present_tc)
        list.add(tc);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravelFinish_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTc()).compareTo(other.isSetTc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tc, other.tc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravelFinish_args(");
      boolean first = true;

      sb.append("tc:");
      if (this.tc == null) {
        sb.append("null");
      } else {
        sb.append(this.tc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tc != null) {
        tc.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravelFinish_argsStandardSchemeFactory implements SchemeFactory {
      public syncTravelFinish_argsStandardScheme getScheme() {
        return new syncTravelFinish_argsStandardScheme();
      }
    }

    private static class syncTravelFinish_argsStandardScheme extends StandardScheme<syncTravelFinish_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravelFinish_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tc = new TravelCommand();
                struct.tc.read(iprot);
                struct.setTcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravelFinish_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tc != null) {
          oprot.writeFieldBegin(TC_FIELD_DESC);
          struct.tc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravelFinish_argsTupleSchemeFactory implements SchemeFactory {
      public syncTravelFinish_argsTupleScheme getScheme() {
        return new syncTravelFinish_argsTupleScheme();
      }
    }

    private static class syncTravelFinish_argsTupleScheme extends TupleScheme<syncTravelFinish_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravelFinish_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTc()) {
          struct.tc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravelFinish_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tc = new TravelCommand();
          struct.tc.read(iprot);
          struct.setTcIsSet(true);
        }
      }
    }

  }

  public static class syncTravelFinish_result implements org.apache.thrift.TBase<syncTravelFinish_result, syncTravelFinish_result._Fields>, java.io.Serializable, Cloneable, Comparable<syncTravelFinish_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncTravelFinish_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncTravelFinish_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncTravelFinish_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncTravelFinish_result.class, metaDataMap);
    }

    public syncTravelFinish_result() {
    }

    public syncTravelFinish_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncTravelFinish_result(syncTravelFinish_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public syncTravelFinish_result deepCopy() {
      return new syncTravelFinish_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public syncTravelFinish_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncTravelFinish_result)
        return this.equals((syncTravelFinish_result)that);
      return false;
    }

    public boolean equals(syncTravelFinish_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncTravelFinish_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncTravelFinish_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncTravelFinish_resultStandardSchemeFactory implements SchemeFactory {
      public syncTravelFinish_resultStandardScheme getScheme() {
        return new syncTravelFinish_resultStandardScheme();
      }
    }

    private static class syncTravelFinish_resultStandardScheme extends StandardScheme<syncTravelFinish_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncTravelFinish_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncTravelFinish_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncTravelFinish_resultTupleSchemeFactory implements SchemeFactory {
      public syncTravelFinish_resultTupleScheme getScheme() {
        return new syncTravelFinish_resultTupleScheme();
      }
    }

    private static class syncTravelFinish_resultTupleScheme extends TupleScheme<syncTravelFinish_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncTravelFinish_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncTravelFinish_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteSyncTravelInstance_args implements org.apache.thrift.TBase<deleteSyncTravelInstance_args, deleteSyncTravelInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSyncTravelInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSyncTravelInstance_args");

    private static final org.apache.thrift.protocol.TField TC_FIELD_DESC = new org.apache.thrift.protocol.TField("tc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSyncTravelInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSyncTravelInstance_argsTupleSchemeFactory());
    }

    public TravelCommand tc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TC((short)1, "tc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TC
            return TC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TC, new org.apache.thrift.meta_data.FieldMetaData("tc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TravelCommand.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSyncTravelInstance_args.class, metaDataMap);
    }

    public deleteSyncTravelInstance_args() {
    }

    public deleteSyncTravelInstance_args(
      TravelCommand tc)
    {
      this();
      this.tc = tc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSyncTravelInstance_args(deleteSyncTravelInstance_args other) {
      if (other.isSetTc()) {
        this.tc = new TravelCommand(other.tc);
      }
    }

    public deleteSyncTravelInstance_args deepCopy() {
      return new deleteSyncTravelInstance_args(this);
    }

    @Override
    public void clear() {
      this.tc = null;
    }

    public TravelCommand getTc() {
      return this.tc;
    }

    public deleteSyncTravelInstance_args setTc(TravelCommand tc) {
      this.tc = tc;
      return this;
    }

    public void unsetTc() {
      this.tc = null;
    }

    /** Returns true if field tc is set (has been assigned a value) and false otherwise */
    public boolean isSetTc() {
      return this.tc != null;
    }

    public void setTcIsSet(boolean value) {
      if (!value) {
        this.tc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TC:
        if (value == null) {
          unsetTc();
        } else {
          setTc((TravelCommand)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TC:
        return getTc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TC:
        return isSetTc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSyncTravelInstance_args)
        return this.equals((deleteSyncTravelInstance_args)that);
      return false;
    }

    public boolean equals(deleteSyncTravelInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_tc = true && this.isSetTc();
      boolean that_present_tc = true && that.isSetTc();
      if (this_present_tc || that_present_tc) {
        if (!(this_present_tc && that_present_tc))
          return false;
        if (!this.tc.equals(that.tc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tc = true && (isSetTc());
      list.add(present_tc);
      if (present_tc)
        list.add(tc);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSyncTravelInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTc()).compareTo(other.isSetTc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tc, other.tc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSyncTravelInstance_args(");
      boolean first = true;

      sb.append("tc:");
      if (this.tc == null) {
        sb.append("null");
      } else {
        sb.append(this.tc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tc != null) {
        tc.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSyncTravelInstance_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSyncTravelInstance_argsStandardScheme getScheme() {
        return new deleteSyncTravelInstance_argsStandardScheme();
      }
    }

    private static class deleteSyncTravelInstance_argsStandardScheme extends StandardScheme<deleteSyncTravelInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSyncTravelInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tc = new TravelCommand();
                struct.tc.read(iprot);
                struct.setTcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSyncTravelInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tc != null) {
          oprot.writeFieldBegin(TC_FIELD_DESC);
          struct.tc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSyncTravelInstance_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSyncTravelInstance_argsTupleScheme getScheme() {
        return new deleteSyncTravelInstance_argsTupleScheme();
      }
    }

    private static class deleteSyncTravelInstance_argsTupleScheme extends TupleScheme<deleteSyncTravelInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSyncTravelInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTc()) {
          struct.tc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSyncTravelInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tc = new TravelCommand();
          struct.tc.read(iprot);
          struct.setTcIsSet(true);
        }
      }
    }

  }

  public static class deleteSyncTravelInstance_result implements org.apache.thrift.TBase<deleteSyncTravelInstance_result, deleteSyncTravelInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSyncTravelInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSyncTravelInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSyncTravelInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSyncTravelInstance_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSyncTravelInstance_result.class, metaDataMap);
    }

    public deleteSyncTravelInstance_result() {
    }

    public deleteSyncTravelInstance_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSyncTravelInstance_result(deleteSyncTravelInstance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteSyncTravelInstance_result deepCopy() {
      return new deleteSyncTravelInstance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteSyncTravelInstance_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSyncTravelInstance_result)
        return this.equals((deleteSyncTravelInstance_result)that);
      return false;
    }

    public boolean equals(deleteSyncTravelInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSyncTravelInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSyncTravelInstance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSyncTravelInstance_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSyncTravelInstance_resultStandardScheme getScheme() {
        return new deleteSyncTravelInstance_resultStandardScheme();
      }
    }

    private static class deleteSyncTravelInstance_resultStandardScheme extends StandardScheme<deleteSyncTravelInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSyncTravelInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSyncTravelInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSyncTravelInstance_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSyncTravelInstance_resultTupleScheme getScheme() {
        return new deleteSyncTravelInstance_resultTupleScheme();
      }
    }

    private static class deleteSyncTravelInstance_resultTupleScheme extends TupleScheme<deleteSyncTravelInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSyncTravelInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSyncTravelInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
